package com.example.chatlog.controller;

import com.example.chatlog.dto.ChatRequest;
import com.example.chatlog.entity.chat.ChatMessages;
import com.example.chatlog.entity.chat.ChatSessions;
import com.example.chatlog.service.ChatMessagesService;
import com.example.chatlog.service.ChatSessionsService;
import com.example.chatlog.service.impl.AiServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/chat-messages")
@CrossOrigin(origins = "*")
public class ChatMessagesController {

    @Autowired
    private ChatMessagesService chatMessagesService;

    @Autowired
    private ChatSessionsService chatSessionsService;

    @Autowired
    private AiServiceImpl aiServiceImpl;


    /**
     * API ƒë·ªÉ t·∫°o session m·ªõi v√† g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n v·ªõi comparison mode
     * @param chatRequest Tin nh·∫Øn ƒë·∫ßu ti√™n t·ª´ user
     * @return K·∫øt qu·∫£ t·∫°o session v√† so s√°nh t·ª´ c·∫£ 2 model
     */
    @PostMapping("/start-comparison")
    public ResponseEntity<Map<String, Object>> startSessionWithComparison(
        @RequestBody ChatRequest chatRequest) {
        
        try {
            System.out.println("[ChatMessagesController] T·∫°o session m·ªõi v·ªõi comparison mode");
            System.out.println("[ChatMessagesController] Tin nh·∫Øn ƒë·∫ßu ti√™n: " + chatRequest.message());

            // B∆∞·ªõc 1: T·∫°o session m·ªõi
            ChatSessions newSession = new ChatSessions();
            newSession.setTitle(chatRequest.message().length() > 50 ? 
                chatRequest.message().substring(0, 50) + "..." : 
                chatRequest.message());
            ChatSessions savedSession = chatSessionsService.save(newSession);
            
            System.out.println("[ChatMessagesController] ƒê√£ t·∫°o session m·ªõi v·ªõi ID: " + savedSession.getSessionId());

            // B∆∞·ªõc 2: G·ªçi comparison mode v·ªõi session m·ªõi
            return sendMessageWithComparison(savedSession.getSessionId(), chatRequest);

        } catch (Exception e) {
            System.out.println("[ChatMessagesController] T·∫°o session v·ªõi comparison mode th·∫•t b·∫°i: " + e.getMessage());
            e.printStackTrace();

            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Failed to create session with comparison: " + e.getMessage());

            return ResponseEntity.status(500).body(errorResponse);
        }
    }


    /**
     * API ƒë·ªÉ g·ª≠i tin nh·∫Øn v·ªõi comparison mode - c·∫£ 2 AI ƒë·ªÅu x·ª≠ l√Ω
     * @param sessionId Session ID
     * @param chatRequest Tin nh·∫Øn t·ª´ user
     * @return K·∫øt qu·∫£ so s√°nh t·ª´ c·∫£ 2 model
     */
    @PostMapping("/compare/{sessionId}")
    public ResponseEntity<Map<String, Object>> sendMessageWithComparison(
        @PathVariable Long sessionId,
        @RequestBody ChatRequest chatRequest) {

        try {
            // Log th√¥ng tin b·∫Øt ƒë·∫ßu comparison mode
            System.out.println("[ChatMessagesController] B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô so s√°nh cho phi√™n: " + sessionId);
            System.out.println("[ChatMessagesController] Tin nh·∫Øn ng∆∞·ªùi d√πng: " + chatRequest.message());

            // B∆∞·ªõc 1: L∆∞u tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o database (KH√îNG g·ªçi AI response)
            ChatMessages userMessage = new ChatMessages();
            userMessage.setContent(chatRequest.message());
            userMessage.setSender(ChatMessages.SenderType.USER);
            ChatMessages savedUserMessage = chatMessagesService.saveWithoutAiResponse(sessionId, userMessage);
            System.out.println("[ChatMessagesController] ƒê√£ l∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng v·ªõi ID: " + savedUserMessage.getMessageId());

            // B∆∞·ªõc 2: G·ªçi comparison mode t·ª´ AiServiceImpl ƒë·ªÉ so s√°nh 2 AI models
            // Method n√†y s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ c·∫£ OpenAI v√† OpenRouter
            Map<String, Object> comparisonResult = aiServiceImpl.handleRequestWithComparison(sessionId, chatRequest);

            // B∆∞·ªõc 3: L∆∞u C·∫¢ HAI responses v√†o database (KH√îNG g·ªçi AI l·∫°i ƒë·ªÉ tr√°nh duplicate)
            @SuppressWarnings("unchecked")
            Map<String, Object> responseGenerationComparison = (Map<String, Object>) comparisonResult.get("response_generation_comparison");
            if (responseGenerationComparison != null) {
                // L∆∞u response OpenAI (KH√îNG g·ªçi AI l·∫°i)
                @SuppressWarnings("unchecked")
                Map<String, Object> openaiResponseData = (Map<String, Object>) responseGenerationComparison.get("openai");
                if (openaiResponseData != null) {
                    ChatMessages openaiMessage = new ChatMessages();
                    openaiMessage.setContent("üîµ **OpenAI Response:**\n\n" + (String) openaiResponseData.get("response"));
                    openaiMessage.setSender(ChatMessages.SenderType.AI);
                    ChatMessages savedOpenaiMessage = chatMessagesService.saveWithoutAiResponse(sessionId, openaiMessage);
                    System.out.println("[ChatMessagesController] ƒê√£ l∆∞u ph·∫£n h·ªìi OpenAI v·ªõi ID: " + savedOpenaiMessage.getMessageId());
                    
                    // Th√™m th√¥ng tin v·ªÅ message ƒë√£ l∆∞u v√†o response
                    comparisonResult.put("saved_openai_message_id", savedOpenaiMessage.getMessageId());
                }

                // L∆∞u response OpenRouter (KH√îNG g·ªçi AI l·∫°i)
                @SuppressWarnings("unchecked")
                Map<String, Object> openrouterResponseData = (Map<String, Object>) responseGenerationComparison.get("openrouter");
                if (openrouterResponseData != null) {
                    ChatMessages openrouterMessage = new ChatMessages();
                    openrouterMessage.setContent("üü† **OpenRouter Response:**\n\n" + (String) openrouterResponseData.get("response"));
                    openrouterMessage.setSender(ChatMessages.SenderType.AI);
                    ChatMessages savedOpenrouterMessage = chatMessagesService.saveWithoutAiResponse(sessionId, openrouterMessage);
                    System.out.println("[ChatMessagesController] ƒê√£ l∆∞u ph·∫£n h·ªìi OpenRouter v·ªõi ID: " + savedOpenrouterMessage.getMessageId());
                    
                    // Th√™m th√¥ng tin v·ªÅ message ƒë√£ l∆∞u v√†o response
                    comparisonResult.put("saved_openrouter_message_id", savedOpenrouterMessage.getMessageId());
                }
            }

            // B∆∞·ªõc 4: Th√™m flag success v√†o response ƒë·ªÉ frontend bi·∫øt request th√†nh c√¥ng
            // Ch·ªâ th√™m nh·ªØng metadata c·∫ßn thi·∫øt cho frontend
            comparisonResult.put("success", true);
            comparisonResult.put("saved_user_message_id", savedUserMessage.getMessageId());
            
            // Tr·∫£ v·ªÅ k·∫øt qu·∫£ so s√°nh v·ªõi HTTP 200 OK
            return ResponseEntity.ok(comparisonResult);

        } catch (Exception e) {
            // Log l·ªói khi comparison mode g·∫∑p s·ª± c·ªë
            System.out.println("[ChatMessagesController] So s√°nh th·∫•t b·∫°i: " + e.getMessage());
            e.printStackTrace();

            // T·∫°o error response v·ªõi th√¥ng tin l·ªói chi ti·∫øt
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("error", "Comparison failed: " + e.getMessage());
            
            // Tr·∫£ v·ªÅ l·ªói v·ªõi HTTP 500 Internal Server Error
            return ResponseEntity.status(500).body(errorResponse);
        }
    }
}

