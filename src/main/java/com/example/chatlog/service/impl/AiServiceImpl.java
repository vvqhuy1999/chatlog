package com.example.chatlog.service.impl;

import com.example.chatlog.dto.ChatRequest;
import com.example.chatlog.dto.RequestBody;
import com.example.chatlog.service.AiService;
import com.example.chatlog.service.LogApiService;
import com.example.chatlog.service.ModelConfigService;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.client.advisor.MessageChatMemoryAdvisor;
import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.ai.chat.memory.MessageWindowChatMemory;
import org.springframework.ai.chat.memory.repository.jdbc.JdbcChatMemoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.util.MimeTypeUtils;
import org.springframework.web.client.RestClient;
import org.springframework.web.multipart.MultipartFile;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

@Service
public class AiServiceImpl implements AiService {
  // L∆∞u tr·ªØ th√¥ng tin mapping c·ªßa Elasticsearch index ƒë·ªÉ tr√°nh g·ªçi l·∫°i nhi·ªÅu l·∫ßn
  private static String fieldLog;

  // Client ƒë·ªÉ giao ti·∫øp v·ªõi AI model (Spring AI)
  private final ChatClient chatClient;

  @Autowired
  private LogApiService logApiService;
  
  @Autowired
  private ModelConfigService modelConfigService;
  
  @Autowired
  @Qualifier("openRouterChatClient")
  private RestClient openRouterClient;
  
  // C√°c service m·ªõi ƒë∆∞·ª£c t√°ch ra
  @Autowired
  private AiQueryService aiQueryService;
  
  @Autowired
  private AiComparisonService aiComparisonService;
  
  
  @Autowired
  private AiResponseService aiResponseService;

  @Autowired
  private QueryOptimizationService queryOptimizationService;
  
  @Autowired
  private PerformanceMonitoringService performanceMonitoringService;



  /**
   * Constructor kh·ªüi t·∫°o AiServiceImpl v·ªõi ChatClient v√† memory
   * @param builder ChatClient.Builder ƒë·ªÉ x√¢y d·ª±ng client AI
   * @param jdbcChatMemoryRepository Repository l∆∞u tr·ªØ l·ªãch s·ª≠ chat
   */
  public AiServiceImpl(ChatClient.Builder builder,  JdbcChatMemoryRepository jdbcChatMemoryRepository) {

    // Kh·ªüi t·∫°o memory ƒë·ªÉ l∆∞u tr·ªØ l·ªãch s·ª≠ chat c·ªßa ng∆∞·ªùi d√πng (t·ªëi ƒëa 50 tin nh·∫Øn)
    ChatMemory chatMemory = MessageWindowChatMemory.builder()
        .chatMemoryRepository(jdbcChatMemoryRepository)
        .maxMessages(50)
        .build();

    // X√¢y d·ª±ng ChatClient v·ªõi memory advisor ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh cu·ªôc tr√≤ chuy·ªán
    this.chatClient = builder
        .defaultAdvisors(MessageChatMemoryAdvisor.builder(chatMemory).build())
        .build();

  }

  /**
   * H√†m ch√≠nh x·ª≠ l√Ω y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng
   * Quy tr√¨nh 3 b∆∞·ªõc:
   * 1. Ph√¢n t√≠ch c√¢u h·ªèi v√† t·∫°o Elasticsearch query (b·∫Øt bu·ªôc cho t·∫•t c·∫£ request)
   * 2. Th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v√† l·∫•y d·ªØ li·ªáu log
   * 3. T√≥m t·∫Øt v√† tr·∫£ l·ªùi b·∫±ng ng√¥n ng·ªØ t·ª± nhi√™n
   *
   * @param sessionId ID phi√™n chat ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh
   * @param chatRequest Y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng
   * @return C√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
   */
  @Override
  public String handleRequest(Long sessionId, ChatRequest chatRequest) {
    long startTime = System.currentTimeMillis();
    boolean success = false;
    
    try {
      // B∆∞·ªõc 1: T·∫°o Elasticsearch query
      System.out.println("[AiServiceImpl] ü§ñ ƒêang t·∫°o Elasticsearch query...");
      RequestBody requestBody = aiQueryService.generateElasticsearchQuery(sessionId, chatRequest);
      
      // B∆∞·ªõc 1.5: T·ªëi ∆∞u h√≥a query
      RequestBody optimizedQuery = queryOptimizationService.optimizeQuery(requestBody, chatRequest);
      
      // B∆∞·ªõc 2: Validation query
      String validationError = aiQueryService.checkBodyFormat(optimizedQuery);
      if (validationError != null) {
        System.out.println("[AiServiceImpl] Query validation failed: " + validationError);
        return validationError;
      }
      
      // B∆∞·ªõc 3: Th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch
      System.out.println("[AiServiceImpl] üîç ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch...");
      String[] result = aiQueryService.getLogData(optimizedQuery, chatRequest);
      String content = result[0];
      String fixedQuery = result[1];
      
      // Ki·ªÉm tra l·ªói t·ª´ Elasticsearch
      if (content != null && content.startsWith("‚ùå")) {
        return content;
      }
      
      // Ki·ªÉm tra k·∫øt qu·∫£ r·ªóng
      if (content != null && aiQueryService.isEmptyElasticsearchResult(content)) {
        System.out.println("[AiServiceImpl] Elasticsearch returned no data, continuing with AI processing");
      }
      
      // B∆∞·ªõc 4: T·∫°o ph·∫£n h·ªìi AI
      System.out.println("[AiServiceImpl] üí¨ ƒêang t·∫°o ph·∫£n h·ªìi AI...");
      String response = aiResponseService.getAiResponse(sessionId, chatRequest, content, fixedQuery);
      
      success = true;
      return response;
      
    } catch (Exception e) {
      System.out.println("[AiServiceImpl] ‚ùå ERROR: " + e.getMessage());
      return "‚ùå **AI Service Error**\n\n" +
             "Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.\n\n" +
             "**Chi ti·∫øt:** " + e.getMessage() + "\n\n" +
             "üí° **G·ª£i √Ω:** Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin n·∫øu v·∫•n ƒë·ªÅ ti·∫øp t·ª•c.";
    } finally {
      // Ghi nh·∫≠n performance metrics
      long responseTime = System.currentTimeMillis() - startTime;
      performanceMonitoringService.recordRequest("handleRequest", responseTime, success);
    }
  }


  /**
   * X·ª≠ l√Ω y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng trong ch·∫ø ƒë·ªô so s√°nh, s·ª≠ d·ª•ng c·∫£ OpenAI v√† OpenRouter
   * C√≥ t√≠ch h·ª£p performance monitoring v√† optimization
   * @param sessionId ID phi√™n chat ƒë·ªÉ duy tr√¨ ng·ªØ c·∫£nh
   * @param chatRequest Y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng
   * @return K·∫øt qu·∫£ so s√°nh gi·ªØa hai provider v·ªõi metrics chi ti·∫øt
   */
  @Override
  public Map<String, Object> handleRequestWithComparison(Long sessionId, ChatRequest chatRequest) {
    long startTime = System.currentTimeMillis();
    boolean success = false;
    
    try {
      System.out.println("[AiServiceImpl] üîÑ B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô so s√°nh v·ªõi optimization...");
      
      // G·ªçi comparison service v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng m·ªõi
      Map<String, Object> result = aiComparisonService.handleRequestWithComparison(sessionId, chatRequest);
      
      // Th√™m performance metadata v√†o k·∫øt qu·∫£
      long totalResponseTime = System.currentTimeMillis() - startTime;
      result.put("total_processing_time_ms", totalResponseTime);
      result.put("optimization_applied", true);
      
      success = true;
      
      System.out.println("[AiServiceImpl] ‚úÖ Comparison mode completed successfully in " + totalResponseTime + "ms");
      return result;
      
    } catch (Exception e) {
      System.out.println("[AiServiceImpl] ‚ùå ERROR in comparison mode: " + e.getMessage());
      e.printStackTrace();
      
      // T·∫°o error response v·ªõi format t∆∞∆°ng t·ª± comparison result
      Map<String, Object> errorResult = new java.util.HashMap<>();
      errorResult.put("success", false);
      errorResult.put("error", "Comparison mode failed: " + e.getMessage());
      errorResult.put("timestamp", java.time.LocalDateTime.now().toString());
      errorResult.put("total_processing_time_ms", System.currentTimeMillis() - startTime);
      
      return errorResult;
      
    } finally {
      // Ghi nh·∫≠n performance metrics cho comparison mode
      long responseTime = System.currentTimeMillis() - startTime;
      performanceMonitoringService.recordRequest("handleRequestWithComparison", responseTime, success);
    }
  }

}