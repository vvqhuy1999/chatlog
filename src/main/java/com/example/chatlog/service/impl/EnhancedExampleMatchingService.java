package com.example.chatlog.service.impl;

import com.example.chatlog.dto.DataExample;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.stream.Collectors;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Enhanced Example Matching Service
 * C·∫£i thi·ªán thu·∫≠t to√°n matching examples v·ªõi semantic analysis v√† context awareness
 */
@Service
public class EnhancedExampleMatchingService {

    // T·ª´ ƒë·ªìng nghƒ©a v√† c√°c thu·∫≠t ng·ªØ li√™n quan cho ti·∫øng Vi·ªát
    private static final Map<String, List<String>> SEMANTIC_SYNONYMS = Map.of(
        "t√¨m", Arrays.asList("t√¨m ki·∫øm", "search", "find", "tra c·ª©u", "lookup", "li·ªát k√™"),
        "ch·∫∑n", Arrays.asList("block", "deny", "c·∫•m", "ngƒÉn ch·∫∑n", "t·ª´ ch·ªëi"),
        "nhi·ªÅu", Arrays.asList("most", "max", "cao nh·∫•t", "l·ªõn nh·∫•t", "top"),
        "ip", Arrays.asList("ƒë·ªãa ch·ªâ ip", "source.ip", "destination.ip", "client"),
        "user", Arrays.asList("ng∆∞·ªùi d√πng", "t√†i kho·∫£n", "account", "username"),
        "th·ªùi gian", Arrays.asList("time", "timestamp", "gi·ªù", "ng√†y", "now", "khi n√†o"),
        "l∆∞u l∆∞·ª£ng", Arrays.asList("traffic", "bƒÉng th√¥ng", "bandwidth", "bytes", "packets"),
        "b·∫£o m·∫≠t", Arrays.asList("security", "firewall", "attack", "threat", "t·∫•n c√¥ng", "hi·ªÉm h·ªça")
    );

    // Tr·ªçng s·ªë cho c√°c lƒ©nh v·ª±c (domain)
    private static final Map<String, Double> DOMAIN_WEIGHTS = Map.of(
        "security", 1.5,
        "network", 1.3,
        "user_activity", 1.2,
        "performance", 1.1,
        "general", 1.0
    );

    // T·ª´ kh√≥a li√™n quan ƒë·∫øn th·ªùi gian
    private static final Set<String> TIME_KEYWORDS = Set.of(
        "gi·ªù", "ng√†y", "tu·∫ßn", "th√°ng", "ph√∫t", "gi√¢y",
        "hour", "day", "week", "month", "minute", "second",
        "now", "past", "recent", "latest", "h√¥m nay", "h√¥m qua"
    );

    /**
     * T√¨m c√°c v√≠ d·ª• li√™n quan v·ªõi thu·∫≠t to√°n t√≠nh ƒëi·ªÉm n√¢ng cao
     */
    @Cacheable(value = "enhanced_examples", keyGenerator = "customKeyGenerator")
    public List<DataExample> findRelevantExamples(String userQuery, List<DataExample> exampleLibrary) {
        System.out.println("üîç B·∫Øt ƒë·∫ßu qu√° tr√¨nh so kh·ªõp th√¥ng minh cho c√¢u h·ªèi: \"" + userQuery + "\"");

        if (exampleLibrary == null || exampleLibrary.isEmpty()) {
            System.out.println("‚ùå Kho tri th·ª©c (knowledge base) tr·ªëng.");
            return new ArrayList<>();
        }

        // B∆∞·ªõc 1: Ph√¢n t√≠ch c√¢u h·ªèi ng∆∞·ªùi d√πng ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ng·ªØ nghƒ©a
        QueryAnalysis queryAnalysis = analyzeQuery(userQuery);

        // B∆∞·ªõc 2: T√≠nh ƒëi·ªÉm cho t·∫•t c·∫£ c√°c v√≠ d·ª• trong kho tri th·ª©c
        List<ExampleScore> scoredExamples = new ArrayList<>();

        for (int i = 0; i < exampleLibrary.size(); i++) {
            DataExample example = exampleLibrary.get(i);
            if (example.getKeywords() == null) continue;

            ExampleScore score = calculateEnhancedScore(queryAnalysis, example, i + 1);
            if (score.getTotalScore() > 0) {
                scoredExamples.add(score);
            }
        }

        // B∆∞·ªõc 3: S·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë v√† √°p d·ª•ng b·ªô l·ªçc ƒëa d·∫°ng
        List<DataExample> finalResults = scoredExamples.stream()
            .sorted((s1, s2) -> Double.compare(s2.getTotalScore(), s1.getTotalScore()))
            .limit(10) // L·∫•y top 10 k·∫øt qu·∫£ ƒë·∫ßu ti√™n
            .map(ExampleScore::getExample)
            .collect(Collectors.toList());

        // √Åp d·ª•ng b·ªô l·ªçc ƒëa d·∫°ng ƒë·ªÉ tr√°nh c√°c v√≠ d·ª• qu√° gi·ªëng nhau
        List<DataExample> diverseResults = applyDiversityFilter(finalResults, 5); // Gi·ªõi h·∫°n 5 v√≠ d·ª• cu·ªëi c√πng

        System.out.println("‚úÖ T√¨m th·∫•y " + diverseResults.size() + " v√≠ d·ª• ph√π h·ª£p v√† ƒëa d·∫°ng.");
        return diverseResults;
    }

    /**
     * Ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin ng·ªØ nghƒ©a
     */
    private QueryAnalysis analyzeQuery(String query) {
        String queryLower = query.toLowerCase();

        // Tr√≠ch xu·∫•t t·ª´ kh√≥a ch√≠nh
        List<String> primaryKeywords = Arrays.stream(queryLower.split("\\s+"))
            .filter(word -> word.length() > 2)
            .filter(word -> !isStopWord(word))
            .collect(Collectors.toList());

        // M·ªü r·ªông t·ª´ kh√≥a ng·ªØ nghƒ©a b·∫±ng t·ª´ ƒë·ªìng nghƒ©a
        Set<String> semanticKeywords = new HashSet<>();
        for (String keyword : primaryKeywords) {
            semanticKeywords.add(keyword);
            for (Map.Entry<String, List<String>> entry : SEMANTIC_SYNONYMS.entrySet()) {
                if (entry.getValue().contains(keyword) || entry.getKey().equals(keyword)) {
                    semanticKeywords.addAll(entry.getValue());
                    semanticKeywords.add(entry.getKey());
                }
            }
        }

        // Ph√°t hi·ªán lƒ©nh v·ª±c (domain)
        String domain = detectDomain(queryLower);

        // Ph√°t hi·ªán √Ω ƒë·ªãnh (intent)
        String intent = detectIntent(queryLower);

        // Ki·ªÉm tra ng·ªØ c·∫£nh th·ªùi gian
        boolean hasTimeContext = TIME_KEYWORDS.stream()
            .anyMatch(queryLower::contains);

        return new QueryAnalysis(primaryKeywords, new ArrayList<>(semanticKeywords),
            domain, intent, hasTimeContext);
    }

    /**
     * T√≠nh ƒëi·ªÉm n√¢ng cao cho m·ªôt v√≠ d·ª•
     */
    private ExampleScore calculateEnhancedScore(QueryAnalysis queryAnalysis, DataExample example, int exampleIndex) {
        double semanticScore = calculateSemanticScore(queryAnalysis, example);
        double contextScore = calculateContextScore(queryAnalysis, example);
        double domainScore = calculateDomainScore(queryAnalysis, example);

        double totalScore = semanticScore + contextScore + domainScore;

        return new ExampleScore(example, semanticScore, contextScore, domainScore, totalScore);
    }

    /**
     * T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng ng·ªØ nghƒ©a
     */
    private double calculateSemanticScore(QueryAnalysis queryAnalysis, DataExample example) {
        double score = 0.0;

        for (String exampleKeyword : Arrays.asList(example.getKeywords())) {
            String exampleKeywordLower = exampleKeyword.toLowerCase();

            // So kh·ªõp ch√≠nh x√°c (tr·ªçng s·ªë cao nh·∫•t)
            if (queryAnalysis.getPrimaryKeywords().stream().anyMatch(exampleKeywordLower::equals)) {
                score += 3.0;
            }

            // So kh·ªõp ng·ªØ nghƒ©a (tr·ªçng s·ªë trung b√¨nh)
            else if (queryAnalysis.getSemanticKeywords().stream().anyMatch(semKey -> exampleKeywordLower.contains(semKey) || semKey.contains(exampleKeywordLower))) {
                score += 2.0;
            }

            // So kh·ªõp m·ªôt ph·∫ßn (tr·ªçng s·ªë th·∫•p)
            else if (queryAnalysis.getPrimaryKeywords().stream().anyMatch(primKey -> exampleKeywordLower.contains(primKey) || primKey.contains(exampleKeywordLower))) {
                score += 1.0;
            }
        }

        return score;
    }

    /**
     * T√≠nh ƒëi·ªÉm li√™n quan v·ªÅ ng·ªØ c·∫£nh
     */
    private double calculateContextScore(QueryAnalysis queryAnalysis, DataExample example) {
        double score = 0.0;

        // So kh·ªõp ng·ªØ c·∫£nh th·ªùi gian
        if (queryAnalysis.hasTimeContext()) {
            boolean exampleHasTime = Arrays.stream(example.getKeywords())
                .anyMatch(keyword -> TIME_KEYWORDS.stream()
                    .anyMatch(timeKeyword -> keyword.toLowerCase().contains(timeKeyword)));
            if (exampleHasTime) {
                score += 2.0;
            }
        }

        // So kh·ªõp √Ω ƒë·ªãnh
        String exampleIntent = detectIntent(example.getQuestion().toLowerCase());
        if (queryAnalysis.getIntent().equals(exampleIntent)) {
            score += 1.5;
        }

        return score;
    }

    /**
     * T√≠nh ƒëi·ªÉm li√™n quan v·ªÅ lƒ©nh v·ª±c
     */
    private double calculateDomainScore(QueryAnalysis queryAnalysis, DataExample example) {
        String queryDomain = queryAnalysis.getDomain();
        String exampleDomain = detectDomain(example.getQuestion().toLowerCase());

        if (queryDomain.equals(exampleDomain)) {
            return 1.0 * DOMAIN_WEIGHTS.getOrDefault(queryDomain, 1.0);
        }

        return 0.0;
    }

    /**
     * √Åp d·ª•ng b·ªô l·ªçc ƒëa d·∫°ng ƒë·ªÉ tr√°nh c√°c v√≠ d·ª• tr√πng l·∫∑p
     */
    private List<DataExample> applyDiversityFilter(List<DataExample> examples, int maxResults) {
        if (examples.size() <= maxResults) {
            return examples;
        }

        List<DataExample> diverseExamples = new ArrayList<>();
        if (!examples.isEmpty()) {
            diverseExamples.add(examples.get(0)); // Lu√¥n gi·ªØ l·∫°i k·∫øt qu·∫£ t·ªët nh·∫•t
        }

        for (DataExample candidate : examples.subList(1, examples.size())) {
            if (diverseExamples.size() >= maxResults) {
                break;
            }

            boolean isDiverseEnough = diverseExamples.stream()
                .allMatch(selected -> calculateExampleSimilarity(candidate, selected) < 0.7); // Ng∆∞·ª°ng t∆∞∆°ng ƒë·ªìng

            if (isDiverseEnough) {
                diverseExamples.add(candidate);
            }
        }

        System.out.println("üîÑ √Åp d·ª•ng b·ªô l·ªçc ƒëa d·∫°ng: t·ª´ " + examples.size() + " v√≠ d·ª• ban ƒë·∫ßu c√≤n " + diverseExamples.size() + " v√≠ d·ª•.");
        return diverseExamples;
    }

    /**
     * T√≠nh to√°n ƒë·ªô t∆∞∆°ng ƒë·ªìng gi·ªØa hai v√≠ d·ª• (d·ª±a tr√™n Jaccard similarity)
     */
    private double calculateExampleSimilarity(DataExample example1, DataExample example2) {
        Set<String> keywords1 = new HashSet<>(Arrays.asList(example1.getKeywords()));
        Set<String> keywords2 = new HashSet<>(Arrays.asList(example2.getKeywords()));

        Set<String> intersection = new HashSet<>(keywords1);
        intersection.retainAll(keywords2);

        Set<String> union = new HashSet<>(keywords1);
        union.addAll(keywords2);

        return union.isEmpty() ? 0.0 : (double) intersection.size() / union.size();
    }

    // C√°c h√†m ti·ªán √≠ch (Helper methods)
    private boolean isStopWord(String word) {
        // C√°c t·ª´ d·ª´ng ph·ªï bi·∫øn trong ti·∫øng Vi·ªát
        Set<String> stopWords = Set.of("l√†", "c·ªßa", "v√†", "c√°c", "c√≥", "trong", "ƒë·ªÉ", "th√¨", "khi", "·ªü", "t·∫°i", "cho");
        return stopWords.contains(word);
    }

    private String detectDomain(String query) {
        if (query.contains("ch·∫∑n") || query.contains("deny") || query.contains("t·∫•n c√¥ng") || query.contains("b·∫£o m·∫≠t")) return "security";
        if (query.contains("l∆∞u l∆∞·ª£ng") || query.contains("bƒÉng th√¥ng") || query.contains("m·∫°ng") || query.contains("network")) return "network";
        if (query.contains("user") || query.contains("ng∆∞·ªùi d√πng") || query.contains("ƒëƒÉng nh·∫≠p")) return "user_activity";
        if (query.contains("hi·ªáu su·∫•t") || query.contains("ch·∫≠m") || query.contains("nhanh")) return "performance";
        return "general";
    }

    private String detectIntent(String query) {
        if (query.contains("ƒë·∫øm") || query.contains("bao nhi√™u") || query.contains("s·ªë l∆∞·ª£ng")) return "counting";
        if (query.contains("top") || query.contains("nhi·ªÅu nh·∫•t") || query.contains("cao nh·∫•t")) return "ranking";
        if (query.contains("t√¨m") || query.contains("li·ªát k√™") || query.contains("hi·ªÉn th·ªã")) return "search";
        if (query.contains("ph√¢n t√≠ch") || query.contains("so s√°nh") || query.contains("xu h∆∞·ªõng")) return "analysis";
        return "general";
    }

    // C√°c l·ªõp n·ªôi b·ªô ƒë·ªÉ l∆∞u tr·ªØ k·∫øt qu·∫£ ph√¢n t√≠ch
    public static class QueryAnalysis {
        private final List<String> primaryKeywords;
        private final List<String> semanticKeywords;
        private final String domain;
        private final String intent;
        private final boolean hasTimeContext;

        public QueryAnalysis(List<String> primaryKeywords, List<String> semanticKeywords, String domain, String intent, boolean hasTimeContext) {
            this.primaryKeywords = primaryKeywords;
            this.semanticKeywords = semanticKeywords;
            this.domain = domain;
            this.intent = intent;
            this.hasTimeContext = hasTimeContext;
        }

        // Getters
        public List<String> getPrimaryKeywords() { return primaryKeywords; }
        public List<String> getSemanticKeywords() { return semanticKeywords; }
        public String getDomain() { return domain; }
        public String getIntent() { return intent; }
        public boolean hasTimeContext() { return hasTimeContext; }
    }

    public static class ExampleScore {
        private final DataExample example;
        private final double semanticScore;
        private final double contextScore;
        private final double domainScore;
        private final double totalScore;

        public ExampleScore(DataExample example, double semanticScore, double contextScore, double domainScore, double totalScore) {
            this.example = example;
            this.semanticScore = semanticScore;
            this.contextScore = contextScore;
            this.domainScore = domainScore;
            this.totalScore = totalScore;
        }

        // Getters
        public DataExample getExample() { return example; }
        public double getTotalScore() { return totalScore; }
    }
}