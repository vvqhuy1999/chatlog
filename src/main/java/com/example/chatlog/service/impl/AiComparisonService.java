package com.example.chatlog.service.impl;

import com.example.chatlog.dto.ChatRequest;
import com.example.chatlog.dto.DataExample;
import com.example.chatlog.dto.RequestBody;
import com.example.chatlog.enums.ModelProvider;
import com.example.chatlog.service.LogApiService;
import com.example.chatlog.utils.SchemaHint;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.ai.chat.messages.SystemMessage;
import org.springframework.ai.chat.messages.UserMessage;
import org.springframework.ai.chat.prompt.ChatOptions;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

/**
 * Service x·ª≠ l√Ω ch·∫ø ƒë·ªô so s√°nh gi·ªØa OpenAI v√† OpenRouter
 * Bao g·ªìm: t·∫°o query song song, th·ª±c hi·ªán t√¨m ki·∫øm, v√† t·∫°o ph·∫£n h·ªìi so s√°nh
 */
@Service
public class AiComparisonService {
    

    @Autowired
    private AiQueryService aiQueryService;
    
    @Autowired
    private AiResponseService aiResponseService;
    
    private final ObjectMapper objectMapper;

    
    // THAY TH·∫æ EnhancedExampleMatchingService b·∫±ng VectorSearchService
    @Autowired
    private VectorSearchService vectorSearchService;
    
    private final ChatClient chatClient;
    
    @Autowired
    public AiComparisonService(ChatClient.Builder builder) {
        this.objectMapper = new ObjectMapper();
        this.chatClient = builder.build();
    }
    
    
    /**
     * T·∫°o chu·ªói th√¥ng tin ng√†y th√°ng cho system message
     */
    private String generateDateContext(LocalDateTime now) {
        return String.format("""
                CURRENT TIME CONTEXT (Vietnam timezone +07:00):
                - Current exact time: %s (+07:00)
                - Current date: %s
                
                PREFERRED TIME QUERY METHOD - Use Elasticsearch relative time expressions:
                - "5 ph√∫t qua, 5 ph√∫t tr∆∞·ªõc, 5 minutes ago", "last 5 minutes" ‚Üí {"gte": "now-5m"}
                - "1 gi·ªù qua, 1 gi·ªù tr∆∞·ªõc, 1 hour ago", "last 1 hour" ‚Üí {"gte": "now-1h"}
                - "24 gi·ªù qua, 24 gi·ªù tr∆∞·ªõc, 24 hours ago", "last 24 hours" ‚Üí {"gte": "now-24h"}
                - "1 tu·∫ßn qua, 1 tu·∫ßn tr∆∞·ªõc, 1 week ago", "7 ng√†y qua, 7 ng√†y tr∆∞·ªõc, 7 days ago", "last week" ‚Üí {"gte": "now-7d"}
                - "1 th√°ng qua, 1 th√°ng tr∆∞·ªõc, 1 month ago", "last month" ‚Üí {"gte": "now-30d"}
                
                SPECIFIC DATE RANGES (when exact dates mentioned):
                - "h√¥m nay, h√¥m nay, today" ‚Üí {"gte": "now/d"}
                - "h√¥m qua, h√¥m qua, yesterday" ‚Üí {"gte": "now-1d/d"}
                - Specific date like "ng√†y 15-09" ‚Üí {"gte": "2025-09-15T00:00:00.000+07:00", "lte": "2025-09-15T23:59:59.999+07:00"}
                
                ADVANTAGES of "now-Xh/d/m" format:
                - More efficient than absolute timestamps
                - Automatically handles timezone
                - Elasticsearch native time calculations
                - Always relative to query execution time
                """,
            now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
            now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
        );
    }
    
    /**
     * X·ª≠ l√Ω y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng trong ch·∫ø ƒë·ªô so s√°nh, s·ª≠ d·ª•ng c·∫£ OpenAI v√† OpenRouter
     */
    public Map<String, Object> handleRequestWithComparison(Long sessionId, ChatRequest chatRequest) {
        Map<String, Object> result = new HashMap<>();
        LocalDateTime now = LocalDateTime.now();
        String dateContext = generateDateContext(now);
        
        // Performance tracking cho comparison mode
        Map<String, Long> timingMetrics = new HashMap<>();
        long overallStartTime = System.currentTimeMillis();
        
        try {
            System.out.println("[AiComparisonService] ===== B·∫ÆT ƒê·∫¶U CH·∫æ ƒê·ªò SO S√ÅNH V·ªöI OPTIMIZATION =====");
            System.out.println("[AiComparisonService] B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô so s√°nh cho phi√™n: " + sessionId);
            System.out.println("[AiComparisonService] Tin nh·∫Øn ng∆∞·ªùi d√πng: " + chatRequest.message());
            System.out.println("[AiComparisonService] S·ª≠ d·ª•ng ng·ªØ c·∫£nh ng√†y th√°ng: " + now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
            
            // DISABLED: Smart Context Building ƒë·ªÉ tr√°nh lazy loading issues
            // L√Ω do: ChatSessions.chatMessages collection g√¢y "could not initialize proxy - no Session" error
            // Solution: B·ªè smart context building, ch·ªâ d√πng query optimization
            System.out.println("[AiComparisonService] ‚ÑπÔ∏è Smart Context Building: DISABLED to prevent lazy loading errors");
            timingMetrics.put("context_building_ms", 0L);
            
            // --- B∆Ø·ªöC 1: So s√°nh qu√° tr√¨nh t·∫°o query v·ªõi optimization ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 1: T·∫°o Elasticsearch Query V·ªõi Optimization =====");
            
            // Chu·∫©n b·ªã schema m·ªôt l·∫ßn ƒë·ªÉ d√πng l·∫°i cho c·∫£ hai prompt
            String fullSchema = SchemaHint.getSchemaHint();
            
            // S·ª≠ d·ª•ng QueryPromptTemplate v√† ƒë∆∞a dynamic examples xu·ªëng cu·ªëi c√πng
            String dynamicExamples = buildDynamicExamples(chatRequest.message());
            System.out.println("dynamicExamples: " + dynamicExamples);

            String queryPrompt = com.example.chatlog.utils.QueryPromptTemplate.createQueryGenerationPrompt(
                chatRequest.message(),
                dateContext,
                null,
                null,
                ""
            );
            
            // T·∫°o system prompt ƒë·∫ßy ƒë·ªß t·ª´ PromptTemplate v·ªõi to√†n b·ªô SchemaHint ƒë·ªÉ b·ªï sung ng·ªØ c·∫£nh
            String fullSystemPrompt = com.example.chatlog.utils.PromptTemplate.getSystemPrompt(
                dateContext,
                SchemaHint.getRoleNormalizationRules(),
                fullSchema,
                SchemaHint.getCategoryGuides(),
                SchemaHint.getQuickPatterns()
            );
            
            // Gh√©p t·∫•t c·∫£, ƒë·∫∑t dynamic examples xu·ªëng cu·ªëi c√πng ƒë·ªÉ AI d·ªÖ ƒë·ªçc
            String combinedPrompt = queryPrompt + "\n\n" + fullSystemPrompt + "\n\nDYNAMIC EXAMPLES FROM KNOWLEDGE BASE\n" + dynamicExamples;
            SystemMessage systemMessage = new SystemMessage(combinedPrompt);
            
            UserMessage userMessage = new UserMessage(chatRequest.message());
//            UserMessage sampleLogMsg = new UserMessage("SAMPLE LOG (for inference):\n" + SchemaHint.examplelog());
            
            System.out.println("---------------------------------------------------------------------------------------");
//            Prompt prompt = new Prompt(List.of(systemMessage, sampleLogMsg, userMessage));
            Prompt prompt = new Prompt(List.of(systemMessage, userMessage));

//            System.out.println("Prompt very long: " + prompt);


            ChatOptions chatOptions = ChatOptions.builder()
                .temperature(0.0D)
                .build();
            
            // Theo d√µi th·ªùi gian t·∫°o query c·ªßa OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang t·∫°o Elasticsearch query...");
            long openaiStartTime = System.currentTimeMillis();
            String openaiRawResponse = chatClient
                .prompt(prompt)
                .options(chatOptions)
                .advisors(advisorSpec -> advisorSpec.param(
                    ChatMemory.CONVERSATION_ID, String.valueOf(sessionId)
                ))
                .call()
                .content();
            long openaiRawEndTime = System.currentTimeMillis();

            // Clean and validate JSON
            String openaiClean = openaiRawResponse != null ? openaiRawResponse.trim() : "";
            if (openaiClean.startsWith("```json")) openaiClean = openaiClean.substring(7);
            if (openaiClean.startsWith("```") ) openaiClean = openaiClean.substring(3);
            if (openaiClean.endsWith("```") ) openaiClean = openaiClean.substring(0, openaiClean.length() - 3);
            openaiClean = openaiClean.trim();
            try { new com.fasterxml.jackson.databind.ObjectMapper().readTree(openaiClean); } catch (Exception e) {
                System.out.println("[AiComparisonService] ‚ùå OPENAI - Invalid JSON returned: " + e.getMessage());
            }
            RequestBody openaiQuery = new RequestBody();
            openaiQuery.setQuery(1);
            openaiQuery.setBody(openaiClean);
            
            // ƒê·∫£m b·∫£o gi√° tr·ªã query ƒë∆∞·ª£c ƒë·∫∑t l√† 1
            if (openaiQuery.getQuery() != 1) {
                openaiQuery.setQuery(1);
            }
            
            // B·ªé T·ªêI ∆ØU H√ìA: d√πng tr·ª±c ti·∫øp query t·ª´ OpenAI
            long openaiEndTime = openaiRawEndTime;
            String openaiQueryString = openaiQuery != null ? openaiQuery.getBody() : null;
            System.out.println("[AiComparisonService] ‚úÖ OPENAI - Query ƒë∆∞·ª£c t·∫°o trong " + (openaiEndTime - openaiStartTime) + "ms");
            System.out.println("[AiComparisonService] üìù OPENAI - Query (ORIGINAL): " + openaiQueryString);
        
            
            // Theo d√µi th·ªùi gian t·∫°o query c·ªßa OpenRouter (th·ª±c s·ª± g·ªçi OpenRouter v·ªõi temperature kh√°c)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang t·∫°o Elasticsearch query...");
            long openrouterStartTime = System.currentTimeMillis();
            
            // Provider: OpenRouter (query generation in comparison mode)
            ChatOptions openrouterChatOptions = ChatOptions.builder()
                .temperature(0.5D)
                .build();
            
            RequestBody openrouterQuery;
            String openrouterQueryString;
            
            try {
                // G·ªçi tr·ª±c ti·∫øp ChatClient v·ªõi options OpenRouter (openrouterChatOptions)
                String openrouterRawResponse = chatClient
                    .prompt(prompt)
                    .options(openrouterChatOptions)
                    .advisors(advisorSpec -> advisorSpec.param(
                        ChatMemory.CONVERSATION_ID, String.valueOf(sessionId)
                    ))
                    .call()
                    .content();
                String openrouterClean = openrouterRawResponse != null ? openrouterRawResponse.trim() : "";
                if (openrouterClean.startsWith("```json")) openrouterClean = openrouterClean.substring(7);
                if (openrouterClean.startsWith("```") ) openrouterClean = openrouterClean.substring(3);
                if (openrouterClean.endsWith("```") ) openrouterClean = openrouterClean.substring(0, openrouterClean.length() - 3);
                openrouterClean = openrouterClean.trim();
                try { new com.fasterxml.jackson.databind.ObjectMapper().readTree(openrouterClean); } catch (Exception e2) {
                    System.out.println("[AiComparisonService] ‚ùå OPENROUTER - Invalid JSON returned: " + e2.getMessage());
                }
                RequestBody rawOpenrouterQuery = new RequestBody();
                rawOpenrouterQuery.setQuery(1);
                rawOpenrouterQuery.setBody(openrouterClean);
                
                // B·ªé T·ªêI ∆ØU H√ìA: d√πng tr·ª±c ti·∫øp query t·ª´ OpenRouter
                openrouterQuery = rawOpenrouterQuery;
                openrouterQueryString = rawOpenrouterQuery.getBody();
                System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Query ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi temperature kh√°c bi·ªát");
            } catch (Exception e) {
                if (e.getMessage() != null && (e.getMessage().contains("503") || e.getMessage().contains("upstream connect error"))) {
                    System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENROUTER - Service t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng (HTTP 503), d√πng optimized OpenAI query: " + e.getMessage());
                } else {
                    System.out.println("[AiComparisonService] ‚ùå OPENROUTER - T·∫°o query th·∫•t b·∫°i, d√πng optimized OpenAI query: " + e.getMessage());
                }
                openrouterQuery = openaiQuery; // Fallback to OpenAI query
                openrouterQueryString = openaiQueryString;
            }
            
            long openrouterEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Query ƒë∆∞·ª£c t·∫°o trong " + (openrouterEndTime - openrouterStartTime) + "ms");
             System.out.println("[AiComparisonService] üìù OPENROUTER - Query (ORIGINAL): " + openrouterQueryString);
            
            // L∆∞u tr·ªØ k·∫øt qu·∫£ t·∫°o query
            Map<String, Object> queryGenerationComparison = new HashMap<>();
            
            Map<String, Object> openaiGeneration = new HashMap<>();
            openaiGeneration.put("response_time_ms", openaiEndTime - openaiStartTime);
            openaiGeneration.put("model", ModelProvider.OPENAI.getModelName());
            openaiGeneration.put("query", openaiQueryString);
            
            Map<String, Object> openrouterGeneration = new HashMap<>();
            openrouterGeneration.put("response_time_ms", openrouterEndTime - openrouterStartTime);
            openrouterGeneration.put("model", ModelProvider.OPENROUTER.getModelName());
            openrouterGeneration.put("query", openrouterQueryString);
            
            queryGenerationComparison.put("openai", openaiGeneration);
            queryGenerationComparison.put("openrouter", openrouterGeneration);
            
            // --- B∆Ø·ªöC 2: T√¨m ki·∫øm Elasticsearch ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 2: T√¨m ki·∫øm Elasticsearch =====");
            
            // Th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi c·∫£ hai query
            Map<String, Object> elasticsearchComparison = new HashMap<>();
            
            // T√¨m ki·∫øm OpenAI v·ªõi query g·ªëc (ch·ªâ khi body h·ª£p l·ªá)
            Map<String, Object> openaiElasticsearch = new HashMap<>();
            String openaiContent;
            String finalOpenaiQuery;
            if (openaiQueryString == null || openaiQueryString.isBlank()) {
                System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENAI - Query r·ªóng/null, b·ªè qua b∆∞·ªõc t√¨m ki·∫øm Elasticsearch");
                openaiContent = "‚ùå Query r·ªóng ho·∫∑c null";
                finalOpenaiQuery = String.valueOf(openaiQueryString);
                timingMetrics.put("openai_search_ms", 0L);
            } else {
                System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi query...");
                long openaiSearchStartTime = System.currentTimeMillis();
                String[] openaiResults = aiQueryService.getLogData(openaiQuery, chatRequest);
                openaiContent = openaiResults[0];
                finalOpenaiQuery = openaiResults[1];
                long openaiSearchTime = System.currentTimeMillis() - openaiSearchStartTime;
                timingMetrics.put("openai_search_ms", openaiSearchTime);
                System.out.println("[AiComparisonService] üìù OpenAI Final Query (ACTUALLY USED): " + finalOpenaiQuery);
                System.out.println("[AiComparisonService] ‚è±Ô∏è OpenAI Search Time: " + openaiSearchTime + "ms");
                // Ki·ªÉm tra xem query c√≥ b·ªã thay ƒë·ªïi kh√¥ng
                if (!finalOpenaiQuery.equals(openaiQueryString)) {
                    System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENAI - Query ƒë√£ b·ªã thay ƒë·ªïi trong qu√° tr√¨nh x·ª≠ l√Ω!");
                    System.out.println("[AiComparisonService] üîÑ OPENAI - Original vs Final query kh√°c nhau");
                }
                if (openaiContent != null && openaiContent.startsWith("‚ùå")) {
                    System.out.println("[AiComparisonService] ‚ùå OPENAI - T√¨m ki·∫øm Elasticsearch g·∫∑p l·ªói, ƒëang th·ª≠ s·ª≠a query...");
                    System.out.println("[AiComparisonService] üîß OPENAI - ƒêang t·∫°o l·∫°i query v·ªõi th√¥ng tin l·ªói...");
                } else {
                    System.out.println("[AiComparisonService] ‚úÖ OPENAI - T√¨m ki·∫øm Elasticsearch ho√†n th√†nh th√†nh c√¥ng");
                    System.out.println("[AiComparisonService] üìä D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ (OpenAI): " + (openaiContent.length() > 500 ? openaiContent.substring(0, 500) + "..." : openaiContent));
                }
            }

            openaiElasticsearch.put("data", openaiContent);
            openaiElasticsearch.put("success", true);
            openaiElasticsearch.put("query", finalOpenaiQuery);
            System.out.println("OpenaiElasticsearch : "+ openaiElasticsearch);
            if (openaiContent != null && openaiContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] üîµ OPENAI - Query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω");
            }
            
            // T√¨m ki·∫øm OpenRouter v·ªõi query g·ªëc
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi query...");
            long openrouterSearchStartTime = System.currentTimeMillis();
            String[] openrouterResults = aiQueryService.getLogData(openrouterQuery, chatRequest);
            String openrouterContent = openrouterResults[0];
            String finalOpenrouterQuery = openrouterResults[1];
            long openrouterSearchTime = System.currentTimeMillis() - openrouterSearchStartTime;
            timingMetrics.put("openrouter_search_ms", openrouterSearchTime);

            System.out.println("[AiComparisonService] üìù OpenRouter Final Query (ACTUALLY USED): " + finalOpenrouterQuery);
            
            // Ki·ªÉm tra xem query c√≥ b·ªã thay ƒë·ªïi kh√¥ng
            if (!finalOpenrouterQuery.equals(openrouterQueryString)) {
                System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENROUTER - Query ƒë√£ b·ªã thay ƒë·ªïi trong qu√° tr√¨nh x·ª≠ l√Ω!");
                System.out.println("[AiComparisonService] üîÑ OPENROUTER - Original vs Final query kh√°c nhau");
            }

            // Ki·ªÉm tra xem query c√≥ b·ªã thay ƒë·ªïi kh√¥ng
            if (!finalOpenrouterQuery.equals(openrouterQueryString)) {
                System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENROUTER - Query ƒë√£ b·ªã thay ƒë·ªïi trong qu√° tr√¨nh x·ª≠ l√Ω!");
                System.out.println("[AiComparisonService] üîÑ OPENROUTER - Original vs Final query kh√°c nhau");
            }
            // Ki·ªÉm tra n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm
            if (openrouterContent != null && openrouterContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] ‚ùå OPENROUTER - T√¨m ki·∫øm Elasticsearch g·∫∑p l·ªói, ƒëang th·ª≠ s·ª≠a query...");
                System.out.println("[AiComparisonService] üîß OPENROUTER - ƒêang t·∫°o l·∫°i query v·ªõi th√¥ng tin l·ªói...");
            } else {
                System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - T√¨m ki·∫øm Elasticsearch ho√†n th√†nh th√†nh c√¥ng");
                System.out.println("[AiComparisonService] üìä D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ (OpenRouter): " + (openrouterContent.length() > 500 ? openrouterContent.substring(0, 500) + "..." : openrouterContent));
            }
            
            Map<String, Object> openrouterElasticsearch = new HashMap<>();
            openrouterElasticsearch.put("data", openrouterContent);
            openrouterElasticsearch.put("success", true);
            openrouterElasticsearch.put("query", finalOpenrouterQuery);
            
            System.out.println("OpenrouterElasticsearch : " + openrouterElasticsearch);
            
            // N·∫øu OpenRouter query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω
            if (openrouterContent != null && openrouterContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] üü† OPENROUTER - Query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω");
            }
            
            elasticsearchComparison.put("openai", openaiElasticsearch);
            elasticsearchComparison.put("openrouter", openrouterElasticsearch);
            
            // --- B∆Ø·ªöC 3: T·∫°o c√¢u tr·∫£ l·ªùi ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 3: T·∫°o c√¢u tr·∫£ l·ªùi AI =====");
            
            // T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ c·∫£ hai model
            Map<String, Object> responseGenerationComparison = new HashMap<>();
            
            // C√¢u tr·∫£ l·ªùi t·ª´ OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ d·ªØ li·ªáu Elasticsearch...");
            long openaiResponseStartTime = System.currentTimeMillis();
            String openaiResponse = aiResponseService.getAiResponseForComparison(sessionId + "_openai", chatRequest, openaiContent, finalOpenaiQuery);
            long openaiResponseEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENAI - Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openaiResponseEndTime - openaiResponseStartTime) + "ms");
            
            Map<String, Object> openaiResponseData = new HashMap<>();
            openaiResponseData.put("elasticsearch_query", finalOpenaiQuery);
            openaiResponseData.put("response", openaiResponse);
            openaiResponseData.put("model", ModelProvider.OPENAI.getModelName());
            openaiResponseData.put("elasticsearch_data", openaiContent);
            openaiResponseData.put("response_time_ms", openaiResponseEndTime - openaiResponseStartTime);
            
            // C√¢u tr·∫£ l·ªùi t·ª´ OpenRouter (s·ª≠ d·ª•ng d·ªØ li·ªáu ri√™ng t·ª´ OpenRouter query)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ d·ªØ li·ªáu Elasticsearch...");
            long openrouterResponseStartTime = System.currentTimeMillis();
            String openrouterResponse = aiResponseService.getAiResponseForComparison(sessionId + "_openrouter", chatRequest, openrouterContent, finalOpenrouterQuery);
            long openrouterResponseEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openrouterResponseEndTime - openrouterResponseStartTime) + "ms");
            
            Map<String, Object> openrouterResponseData = new HashMap<>();
            openrouterResponseData.put("elasticsearch_query", finalOpenrouterQuery);  // ‚Üê QUERY HI·ªÇN th·ªã TRONG UI
            openrouterResponseData.put("original_query", openrouterQueryString);     // ‚Üê QUERY G·ªêC AI t·∫°o
            openrouterResponseData.put("response", openrouterResponse);
            openrouterResponseData.put("model", ModelProvider.OPENROUTER.getModelName());
            openrouterResponseData.put("elasticsearch_data", openrouterContent);
            openrouterResponseData.put("response_time_ms", openrouterResponseEndTime - openrouterResponseStartTime);

            System.out.println("[AiComparisonService] üì§ OPENROUTER - Tr·∫£ v·ªÅ query cho UI: " + finalOpenrouterQuery);
            if (!finalOpenrouterQuery.equals(openrouterQueryString)) {
                System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENROUTER - UI s·∫Ω hi·ªÉn th·ªã query KH√ÅC v·ªõi query ban ƒë·∫ßu!");
            }

            responseGenerationComparison.put("openai", openaiResponseData);
            responseGenerationComparison.put("openrouter", openrouterResponseData);
            
            // --- T·ªïng h·ª£p k·∫øt qu·∫£ cu·ªëi c√πng v·ªõi enhanced metrics ---
            System.out.println("[AiComparisonService] ===== T·ªîNG H·ª¢P K·∫æT QU·∫¢ V·ªöI ENHANCED METRICS =====");
            
            // T√≠nh to√°n timing metrics t·ªïng th·ªÉ
            long totalProcessingTime = System.currentTimeMillis() - overallStartTime;
            timingMetrics.put("total_processing_ms", totalProcessingTime);
            timingMetrics.put("openai_total_ms", openaiEndTime - openaiStartTime + openaiResponseEndTime - openaiResponseStartTime);
            timingMetrics.put("openrouter_total_ms", openrouterEndTime - openrouterStartTime + openrouterResponseEndTime - openrouterResponseStartTime);
            
            // Th·ªëng k√™ optimization impact (simplified)
            Map<String, Object> optimizationStats = new HashMap<>();
            try {
                optimizationStats.put("query_optimization_applied", true);
                optimizationStats.put("smart_context_used", false); // Disabled ƒë·ªÉ avoid lazy loading
                optimizationStats.put("context_entities_count", 0);
                optimizationStats.put("detected_intent", "GENERAL");
                optimizationStats.put("query_similarity", openaiQueryString != null && openaiQueryString.equals(openrouterQueryString));
                optimizationStats.put("data_similarity", openaiContent != null && openaiContent.equals(openrouterContent));
            } catch (Exception statsException) {
                System.out.println("[AiComparisonService] Warning: Error creating optimization stats: " + statsException.getMessage());
                optimizationStats.put("stats_error", true);
                optimizationStats.put("error_message", statsException.getMessage());
            }
            
            // Th√™m c√°c metrics m·ªõi v√†o k·∫øt qu·∫£ v·ªõi safe handling
            result.put("elasticsearch_comparison", elasticsearchComparison);
            result.put("success", true);
            result.put("query_generation_comparison", queryGenerationComparison);
            result.put("response_generation_comparison", responseGenerationComparison);
            result.put("timestamp", now.toString());
            result.put("user_question", chatRequest.message());
            result.put("timing_metrics", timingMetrics);
            result.put("optimization_stats", optimizationStats);
            
            // Enhanced context (disabled)
            try {
                result.put("enhanced_context", Map.of(
                    "intent_type", "DISABLED",
                    "relevant_messages_count", 0,
                    "entities_count", 0,
                    "context_disabled", true
                ));
            } catch (Exception contextStatsException) {
                System.out.println("[AiComparisonService] Warning: Error adding context stats: " + contextStatsException.getMessage());
                result.put("enhanced_context", Map.of("error", "Could not build context stats"));
            }
            
            System.out.println("[AiComparisonService] üéâ So s√°nh ho√†n th√†nh th√†nh c√¥ng v·ªõi optimization!");
            System.out.println("[AiComparisonService] ‚è±Ô∏è T·ªïng th·ªùi gian processing: " + totalProcessingTime + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è Context building: " + timingMetrics.get("context_building_ms") + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è OpenAI search: " + timingMetrics.get("openai_search_ms") + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è OpenRouter search: " + timingMetrics.get("openrouter_search_ms") + "ms");
            System.out.println("[AiComparisonService] üß† Context building: DISABLED");
            System.out.println("[AiComparisonService] üìù Smart features: DISABLED to avoid lazy loading");
            System.out.println("[AiComparisonService] üîç Query optimization impact: " + (openaiQueryString.equals(openrouterQueryString) ? "C√πng optimized pattern" : "Kh√°c bi·ªát ƒë∆∞·ª£c t·ªëi ∆∞u"));
            System.out.println("[AiComparisonService] üìä Data consistency: " + (openaiContent.equals(openrouterContent) ? "Consistent results" : "Different results detected"));

        } catch (Exception e) {
            long errorProcessingTime = System.currentTimeMillis() - overallStartTime;
            
            System.out.println("[AiComparisonService] ‚ùå ===== L·ªñI TRONG CH·∫æ ƒê·ªò SO S√ÅNH =====");
            System.out.println("[AiComparisonService] üí• L·ªói trong ch·∫ø ƒë·ªô so s√°nh: " + e.getMessage());
            e.printStackTrace();
            
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("timestamp", now.toString());
            result.put("processing_time_ms", errorProcessingTime);

        }
        
        return result;
    }
    

    
    /**
     * Build dynamic examples string for the prompt using vector search
     */
    private String buildDynamicExamples(String userQuery) {
        return vectorSearchService.findRelevantExamples(userQuery);
    }
}
