package com.example.chatlog.service.impl;

import com.example.chatlog.dto.ChatRequest;
import com.example.chatlog.dto.DataExample;
import com.example.chatlog.dto.RequestBody;
import com.example.chatlog.enums.ModelProvider;
import com.example.chatlog.service.LogApiService;
import com.example.chatlog.utils.SchemaHint;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.ai.chat.messages.SystemMessage;
import org.springframework.ai.chat.messages.UserMessage;
import org.springframework.ai.chat.prompt.ChatOptions;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Service x·ª≠ l√Ω ch·∫ø ƒë·ªô so s√°nh gi·ªØa OpenAI v√† OpenRouter
 * Bao g·ªìm: t·∫°o query song song, th·ª±c hi·ªán t√¨m ki·∫øm, v√† t·∫°o ph·∫£n h·ªìi so s√°nh
 */
@Service
public class AiComparisonService {
    
    @Autowired
    private LogApiService logApiService;
    
    @Autowired
    private AiQueryService aiQueryService;
    
    @Autowired
    private AiResponseService aiResponseService;
    
    private final ObjectMapper objectMapper;
    private List<DataExample> exampleLibrary;
    // T√≠ch h·ª£p c√°c service t·ªëi ∆∞u h√≥a m·ªõi
    @Autowired
    private QueryOptimizationService queryOptimizationService;
    
    @Autowired
    private PerformanceMonitoringService performanceMonitoringService;
    
    @Autowired
    private EnhancedExampleMatchingService enhancedExampleMatchingService;
    
    private final ChatClient chatClient;
    
    @Autowired
    public AiComparisonService(ChatClient.Builder builder) {
        this.objectMapper = new ObjectMapper();
        this.chatClient = builder.build();
        loadExampleLibrary();
    }
    
    /**
     * Load the example library from multiple JSON knowledge base files
     */
    private void loadExampleLibrary() {
        this.exampleLibrary = new ArrayList<>();
        
        // Define all knowledge base files to load (same as AiQueryService)
        String[] knowledgeBaseFiles = {
            "fortigate_queries_full.json",
            "advanced_security_scenarios.json",
            "network_forensics_performance.json",
            "business_intelligence_operations.json",
            "incident_response_playbooks.json",
            "compliance_audit_scenarios.json",
            "zero_trust_scenarios.json",
    "threat_intelligence_scenarios.json",
            "operational_security_scenarios.json",
            "email_data_security.json",
            "network_anomaly_detection.json"
        };
        
        int totalLoaded = 0;
        
        for (String fileName : knowledgeBaseFiles) {
            try {
                ClassPathResource resource = new ClassPathResource(fileName);
                InputStream inputStream = resource.getInputStream();
                List<DataExample> examples = objectMapper.readValue(inputStream, new TypeReference<List<DataExample>>() {});
                
                this.exampleLibrary.addAll(examples);
                totalLoaded += examples.size();
                
                System.out.println("[AiComparisonService] ‚úÖ Loaded " + examples.size() + " examples from " + fileName);
            } catch (IOException e) {
                System.err.println("[AiComparisonService] ‚ùå Failed to load " + fileName + ": " + e.getMessage());
            }
        }
        
        System.out.println("[AiComparisonService] üìö Total examples loaded: " + totalLoaded);
        
        if (this.exampleLibrary.isEmpty()) {
            System.err.println("[AiComparisonService] ‚ö†Ô∏è No examples loaded! Creating empty list.");
            this.exampleLibrary = new ArrayList<>();
        }
    }
    
    /**
     * T·∫°o chu·ªói th√¥ng tin ng√†y th√°ng cho system message
     */
    private String generateDateContext(LocalDateTime now) {
        return String.format("""
                CURRENT TIME CONTEXT (Vietnam timezone +07:00):
                - Current exact time: %s (+07:00)
                - Current date: %s
                
                PREFERRED TIME QUERY METHOD - Use Elasticsearch relative time expressions:
                - "5 ph√∫t qua, 5 ph√∫t tr∆∞·ªõc, 5 minutes ago", "last 5 minutes" ‚Üí {"gte": "now-5m"}
                - "1 gi·ªù qua, 1 gi·ªù tr∆∞·ªõc, 1 hour ago", "last 1 hour" ‚Üí {"gte": "now-1h"}
                - "24 gi·ªù qua, 24 gi·ªù tr∆∞·ªõc, 24 hours ago", "last 24 hours" ‚Üí {"gte": "now-24h"}
                - "1 tu·∫ßn qua, 1 tu·∫ßn tr∆∞·ªõc, 1 week ago", "7 ng√†y qua, 7 ng√†y tr∆∞·ªõc, 7 days ago", "last week" ‚Üí {"gte": "now-7d"}
                - "1 th√°ng qua, 1 th√°ng tr∆∞·ªõc, 1 month ago", "last month" ‚Üí {"gte": "now-30d"}
                
                SPECIFIC DATE RANGES (when exact dates mentioned):
                - "h√¥m nay, h√¥m nay, today" ‚Üí {"gte": "now/d"}
                - "h√¥m qua, h√¥m qua, yesterday" ‚Üí {"gte": "now-1d/d"}
                - Specific date like "ng√†y 15-09" ‚Üí {"gte": "2025-09-15T00:00:00.000+07:00", "lte": "2025-09-15T23:59:59.999+07:00"}
                
                ADVANTAGES of "now-Xh/d/m" format:
                - More efficient than absolute timestamps
                - Automatically handles timezone
                - Elasticsearch native time calculations
                - Always relative to query execution time
                """,
            now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
            now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
        );
    }
    
    /**
     * X·ª≠ l√Ω y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng trong ch·∫ø ƒë·ªô so s√°nh, s·ª≠ d·ª•ng c·∫£ OpenAI v√† OpenRouter
     */
    public Map<String, Object> handleRequestWithComparison(Long sessionId, ChatRequest chatRequest) {
        Map<String, Object> result = new HashMap<>();
        LocalDateTime now = LocalDateTime.now();
        String dateContext = generateDateContext(now);
        
        // Performance tracking cho comparison mode
        Map<String, Long> timingMetrics = new HashMap<>();
        long overallStartTime = System.currentTimeMillis();
        
        try {
            System.out.println("[AiComparisonService] ===== B·∫ÆT ƒê·∫¶U CH·∫æ ƒê·ªò SO S√ÅNH V·ªöI OPTIMIZATION =====");
            System.out.println("[AiComparisonService] B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô so s√°nh cho phi√™n: " + sessionId);
            System.out.println("[AiComparisonService] Tin nh·∫Øn ng∆∞·ªùi d√πng: " + chatRequest.message());
            System.out.println("[AiComparisonService] S·ª≠ d·ª•ng ng·ªØ c·∫£nh ng√†y th√°ng: " + now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
            
            // DISABLED: Smart Context Building ƒë·ªÉ tr√°nh lazy loading issues
            // L√Ω do: ChatSessions.chatMessages collection g√¢y "could not initialize proxy - no Session" error
            // Solution: B·ªè smart context building, ch·ªâ d√πng query optimization
            System.out.println("[AiComparisonService] ‚ÑπÔ∏è Smart Context Building: DISABLED to prevent lazy loading errors");
            timingMetrics.put("context_building_ms", 0L);
            
            // --- B∆Ø·ªöC 1: So s√°nh qu√° tr√¨nh t·∫°o query v·ªõi optimization ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 1: T·∫°o Elasticsearch Query V·ªõi Optimization =====");
            
            // Chu·∫©n b·ªã schema m·ªôt l·∫ßn ƒë·ªÉ d√πng l·∫°i cho c·∫£ hai prompt
            String fullSchema = SchemaHint.getSchemaHint();
            
            // S·ª≠ d·ª•ng QueryPromptTemplate v·ªõi dynamic examples
            String dynamicExamples = buildDynamicExamples(chatRequest.message());
            String queryPrompt = com.example.chatlog.utils.QueryPromptTemplate.createQueryGenerationPrompt(
                chatRequest.message(),
                dateContext,
                null,
                null,
                dynamicExamples
            );
            
            // T·∫°o system prompt ƒë·∫ßy ƒë·ªß t·ª´ PromptTemplate v·ªõi to√†n b·ªô SchemaHint ƒë·ªÉ b·ªï sung ng·ªØ c·∫£nh
            String fullSystemPrompt = com.example.chatlog.utils.PromptTemplate.getSystemPrompt(
                dateContext,
                SchemaHint.getRoleNormalizationRules(),
                fullSchema,
                SchemaHint.getCategoryGuides(),
                SchemaHint.getQuickPatterns()
            );
            
            // Gh√©p t·∫•t c·∫£ v√†o m·ªôt system message duy nh·∫•t ƒë·ªÉ AI c√≥ t·ªëi ƒëa b·ªëi c·∫£nh
            String combinedPrompt = queryPrompt + "\n\n" + fullSystemPrompt;
            SystemMessage systemMessage = new SystemMessage(combinedPrompt);
            
            UserMessage userMessage = new UserMessage(chatRequest.message());
            List<String> schemaHints = SchemaHint.allSchemas();
            String schemaContext = String.join("\n\n", schemaHints);
            UserMessage schemaMsg = new UserMessage("Available schema hints:\n" + schemaContext);
            UserMessage sampleLogMsg = new UserMessage("SAMPLE LOG (for inference):\n" + SchemaHint.examplelog());
            
            System.out.println("---------------------------------------------------------------------------------------");
            Prompt prompt = new Prompt(List.of(systemMessage, schemaMsg, sampleLogMsg, userMessage));

            System.out.println("Prompt very long: " + prompt);


            ChatOptions chatOptions = ChatOptions.builder()
                .temperature(0.0D)
                .build();
            
            // Theo d√µi th·ªùi gian t·∫°o query c·ªßa OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang t·∫°o Elasticsearch query...");
            long openaiStartTime = System.currentTimeMillis();
            RequestBody openaiQuery = chatClient
                .prompt(prompt)
                .options(chatOptions)
                .call()
                .entity(new ParameterizedTypeReference<>() {});
            long openaiRawEndTime = System.currentTimeMillis();
            
            // ƒê·∫£m b·∫£o gi√° tr·ªã query ƒë∆∞·ª£c ƒë·∫∑t l√† 1
            if (openaiQuery.getQuery() != 1) {
                openaiQuery.setQuery(1);
            }
            
            // OPTIMIZATION: √Åp d·ª•ng query optimization cho OpenAI
            RequestBody optimizedOpenaiQuery = queryOptimizationService.optimizeQuery(openaiQuery, chatRequest);
            long openaiEndTime = System.currentTimeMillis();
            
            String openaiQueryString = optimizedOpenaiQuery.getBody();
            System.out.println("[AiComparisonService] ‚úÖ OPENAI - Query ƒë∆∞·ª£c t·∫°o v√† t·ªëi ∆∞u trong " + (openaiEndTime - openaiStartTime) + "ms");
            System.out.println("[AiComparisonService] üîß OPENAI - Raw generation: " + (openaiRawEndTime - openaiStartTime) + "ms, Optimization: " + (openaiEndTime - openaiRawEndTime) + "ms");
            System.out.println("[AiComparisonService] üìù OPENAI - Optimized Query: " + openaiQueryString);
            
            // Theo d√µi th·ªùi gian t·∫°o query c·ªßa OpenRouter (th·ª±c s·ª± g·ªçi OpenRouter v·ªõi temperature kh√°c)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang t·∫°o Elasticsearch query...");
            long openrouterStartTime = System.currentTimeMillis();
            
            // Provider: OpenRouter (query generation in comparison mode)
            ChatOptions openrouterChatOptions = ChatOptions.builder()
                .temperature(0.5D)
                .build();
            
            RequestBody openrouterQuery;
            String openrouterQueryString;
            
            try {
                // G·ªçi tr·ª±c ti·∫øp ChatClient v·ªõi options OpenRouter (openrouterChatOptions)
                RequestBody rawOpenrouterQuery = chatClient
                    .prompt(prompt)
                    .options(openrouterChatOptions)
                    .call()
                    .entity(new ParameterizedTypeReference<>() {});
                    
                if (rawOpenrouterQuery.getQuery() != 1) {
                    rawOpenrouterQuery.setQuery(1);
                }
                
                // OPTIMIZATION: √Åp d·ª•ng query optimization cho OpenRouter
                RequestBody optimizedOpenrouterQuery = queryOptimizationService.optimizeQuery(rawOpenrouterQuery, chatRequest);
                openrouterQuery = optimizedOpenrouterQuery;
                openrouterQueryString = optimizedOpenrouterQuery.getBody();
                
                System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Query ƒë∆∞·ª£c t·∫°o v√† t·ªëi ∆∞u th√†nh c√¥ng v·ªõi temperature kh√°c bi·ªát");
            } catch (Exception e) {
                if (e.getMessage() != null && (e.getMessage().contains("503") || e.getMessage().contains("upstream connect error"))) {
                    System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENROUTER - Service t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng (HTTP 503), d√πng optimized OpenAI query: " + e.getMessage());
                } else {
                    System.out.println("[AiComparisonService] ‚ùå OPENROUTER - T·∫°o query th·∫•t b·∫°i, d√πng optimized OpenAI query: " + e.getMessage());
                }
                openrouterQuery = optimizedOpenaiQuery; // Fallback to optimized OpenAI query
                openrouterQueryString = openaiQueryString;
            }
            
            long openrouterEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Query ƒë∆∞·ª£c t·∫°o v√† t·ªëi ∆∞u trong " + (openrouterEndTime - openrouterStartTime) + "ms");
            System.out.println("[AiComparisonService] üìù OPENROUTER - Optimized Query: " + openrouterQueryString);
            
            // L∆∞u tr·ªØ k·∫øt qu·∫£ t·∫°o query
            Map<String, Object> queryGenerationComparison = new HashMap<>();
            
            Map<String, Object> openaiGeneration = new HashMap<>();
            openaiGeneration.put("response_time_ms", openaiEndTime - openaiStartTime);
            openaiGeneration.put("model", ModelProvider.OPENAI.getModelName());
            openaiGeneration.put("query", openaiQueryString);
            
            Map<String, Object> openrouterGeneration = new HashMap<>();
            openrouterGeneration.put("response_time_ms", openrouterEndTime - openrouterStartTime);
            openrouterGeneration.put("model", ModelProvider.OPENROUTER.getModelName());
            openrouterGeneration.put("query", openrouterQueryString);
            
            queryGenerationComparison.put("openai", openaiGeneration);
            queryGenerationComparison.put("openrouter", openrouterGeneration);
            
            // --- B∆Ø·ªöC 2: T√¨m ki·∫øm Elasticsearch ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 2: T√¨m ki·∫øm Elasticsearch =====");
            
            // Th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi c·∫£ hai query
            Map<String, Object> elasticsearchComparison = new HashMap<>();
            
            // T√¨m ki·∫øm OpenAI v·ªõi optimized query
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi optimized query...");
            long openaiSearchStartTime = System.currentTimeMillis();
            String[] openaiResults = aiQueryService.getLogData(optimizedOpenaiQuery, chatRequest);
            String openaiContent = openaiResults[0];
            String finalOpenaiQuery = openaiResults[1];
            long openaiSearchTime = System.currentTimeMillis() - openaiSearchStartTime;
            timingMetrics.put("openai_search_ms", openaiSearchTime);
            
            System.out.println("[AiComparisonService] üìù OpenAI Final Query: " + finalOpenaiQuery);
            System.out.println("[AiComparisonService] ‚è±Ô∏è OpenAI Search Time: " + openaiSearchTime + "ms");
            
            // Ki·ªÉm tra n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm
            if (openaiContent != null && openaiContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] ‚ùå OPENAI - T√¨m ki·∫øm Elasticsearch g·∫∑p l·ªói, ƒëang th·ª≠ s·ª≠a query...");
                System.out.println("[AiComparisonService] üîß OPENAI - ƒêang t·∫°o l·∫°i query v·ªõi th√¥ng tin l·ªói...");
            } else {
                System.out.println("[AiComparisonService] ‚úÖ OPENAI - T√¨m ki·∫øm Elasticsearch ho√†n th√†nh th√†nh c√¥ng");
                System.out.println("[AiComparisonService] üìä D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ (OpenAI): " + (openaiContent.length() > 500 ? openaiContent.substring(0, 500) + "..." : openaiContent));
            }
            
            Map<String, Object> openaiElasticsearch = new HashMap<>();
            openaiElasticsearch.put("data", openaiContent);
            openaiElasticsearch.put("success", true);
            openaiElasticsearch.put("query", finalOpenaiQuery);
            
            System.out.println("OpenaiElasticsearch : "+ openaiElasticsearch);
            
            // N·∫øu OpenAI query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω
            if (openaiContent != null && openaiContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] üîµ OPENAI - Query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω");
            }
            
            // T√¨m ki·∫øm OpenRouter v·ªõi optimized query
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi optimized query...");
            long openrouterSearchStartTime = System.currentTimeMillis();
            String[] openrouterResults = aiQueryService.getLogData(openrouterQuery, chatRequest);
            String openrouterContent = openrouterResults[0];
            String finalOpenrouterQuery = openrouterResults[1];
            long openrouterSearchTime = System.currentTimeMillis() - openrouterSearchStartTime;
            timingMetrics.put("openrouter_search_ms", openrouterSearchTime);
            
            // Ki·ªÉm tra n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm
            if (openrouterContent != null && openrouterContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] ‚ùå OPENROUTER - T√¨m ki·∫øm Elasticsearch g·∫∑p l·ªói, ƒëang th·ª≠ s·ª≠a query...");
                System.out.println("[AiComparisonService] üîß OPENROUTER - ƒêang t·∫°o l·∫°i query v·ªõi th√¥ng tin l·ªói...");
            } else {
                System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - T√¨m ki·∫øm Elasticsearch ho√†n th√†nh th√†nh c√¥ng");
                System.out.println("[AiComparisonService] üìä D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ (OpenRouter): " + (openrouterContent.length() > 500 ? openrouterContent.substring(0, 500) + "..." : openrouterContent));
            }
            
            Map<String, Object> openrouterElasticsearch = new HashMap<>();
            openrouterElasticsearch.put("data", openrouterContent);
            openrouterElasticsearch.put("success", true);
            openrouterElasticsearch.put("query", finalOpenrouterQuery);
            
            System.out.println("OpenrouterElasticsearch : " + openrouterElasticsearch);
            
            // N·∫øu OpenRouter query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω
            if (openrouterContent != null && openrouterContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] üü† OPENROUTER - Query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω");
            }
            
            elasticsearchComparison.put("openai", openaiElasticsearch);
            elasticsearchComparison.put("openrouter", openrouterElasticsearch);
            
            // --- B∆Ø·ªöC 3: T·∫°o c√¢u tr·∫£ l·ªùi ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 3: T·∫°o c√¢u tr·∫£ l·ªùi AI =====");
            
            // T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ c·∫£ hai model
            Map<String, Object> responseGenerationComparison = new HashMap<>();
            
            // C√¢u tr·∫£ l·ªùi t·ª´ OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ d·ªØ li·ªáu Elasticsearch...");
            long openaiResponseStartTime = System.currentTimeMillis();
            String openaiResponse = aiResponseService.getAiResponseForComparison(sessionId + "_openai", chatRequest, openaiContent, finalOpenaiQuery);
            long openaiResponseEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENAI - Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openaiResponseEndTime - openaiResponseStartTime) + "ms");
            
            Map<String, Object> openaiResponseData = new HashMap<>();
            openaiResponseData.put("elasticsearch_query", finalOpenaiQuery);
            openaiResponseData.put("response", openaiResponse);
            openaiResponseData.put("model", ModelProvider.OPENAI.getModelName());
            openaiResponseData.put("elasticsearch_data", openaiContent);
            openaiResponseData.put("response_time_ms", openaiResponseEndTime - openaiResponseStartTime);
            
            // C√¢u tr·∫£ l·ªùi t·ª´ OpenRouter (s·ª≠ d·ª•ng d·ªØ li·ªáu ri√™ng t·ª´ OpenRouter query)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ d·ªØ li·ªáu Elasticsearch...");
            long openrouterResponseStartTime = System.currentTimeMillis();
            String openrouterResponse = aiResponseService.getAiResponseForComparison(sessionId + "_openrouter", chatRequest, openrouterContent, finalOpenrouterQuery);
            long openrouterResponseEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openrouterResponseEndTime - openrouterResponseStartTime) + "ms");
            
            Map<String, Object> openrouterResponseData = new HashMap<>();
            openrouterResponseData.put("elasticsearch_query", finalOpenrouterQuery);
            openrouterResponseData.put("response", openrouterResponse);
            openrouterResponseData.put("model", ModelProvider.OPENROUTER.getModelName());
            openrouterResponseData.put("elasticsearch_data", openrouterContent);
            openrouterResponseData.put("response_time_ms", openrouterResponseEndTime - openrouterResponseStartTime);
            
            responseGenerationComparison.put("openai", openaiResponseData);
            responseGenerationComparison.put("openrouter", openrouterResponseData);
            
            // --- T·ªïng h·ª£p k·∫øt qu·∫£ cu·ªëi c√πng v·ªõi enhanced metrics ---
            System.out.println("[AiComparisonService] ===== T·ªîNG H·ª¢P K·∫æT QU·∫¢ V·ªöI ENHANCED METRICS =====");
            
            // T√≠nh to√°n timing metrics t·ªïng th·ªÉ
            long totalProcessingTime = System.currentTimeMillis() - overallStartTime;
            timingMetrics.put("total_processing_ms", totalProcessingTime);
            timingMetrics.put("openai_total_ms", openaiEndTime - openaiStartTime + openaiResponseEndTime - openaiResponseStartTime);
            timingMetrics.put("openrouter_total_ms", openrouterEndTime - openrouterStartTime + openrouterResponseEndTime - openrouterResponseStartTime);
            
            // Th·ªëng k√™ optimization impact (simplified)
            Map<String, Object> optimizationStats = new HashMap<>();
            try {
                optimizationStats.put("query_optimization_applied", true);
                optimizationStats.put("smart_context_used", false); // Disabled ƒë·ªÉ avoid lazy loading
                optimizationStats.put("context_entities_count", 0);
                optimizationStats.put("detected_intent", "GENERAL");
                optimizationStats.put("query_similarity", openaiQueryString != null && openaiQueryString.equals(openrouterQueryString));
                optimizationStats.put("data_similarity", openaiContent != null && openaiContent.equals(openrouterContent));
            } catch (Exception statsException) {
                System.out.println("[AiComparisonService] Warning: Error creating optimization stats: " + statsException.getMessage());
                optimizationStats.put("stats_error", true);
                optimizationStats.put("error_message", statsException.getMessage());
            }
            
            // Th√™m c√°c metrics m·ªõi v√†o k·∫øt qu·∫£ v·ªõi safe handling
            result.put("elasticsearch_comparison", elasticsearchComparison);
            result.put("success", true);
            result.put("query_generation_comparison", queryGenerationComparison);
            result.put("response_generation_comparison", responseGenerationComparison);
            result.put("timestamp", now.toString());
            result.put("user_question", chatRequest.message());
            result.put("timing_metrics", timingMetrics);
            result.put("optimization_stats", optimizationStats);
            
            // Enhanced context (disabled)
            try {
                result.put("enhanced_context", Map.of(
                    "intent_type", "DISABLED",
                    "relevant_messages_count", 0,
                    "entities_count", 0,
                    "context_disabled", true
                ));
            } catch (Exception contextStatsException) {
                System.out.println("[AiComparisonService] Warning: Error adding context stats: " + contextStatsException.getMessage());
                result.put("enhanced_context", Map.of("error", "Could not build context stats"));
            }
            
            System.out.println("[AiComparisonService] üéâ So s√°nh ho√†n th√†nh th√†nh c√¥ng v·ªõi optimization!");
            System.out.println("[AiComparisonService] ‚è±Ô∏è T·ªïng th·ªùi gian processing: " + totalProcessingTime + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è Context building: " + timingMetrics.get("context_building_ms") + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è OpenAI search: " + timingMetrics.get("openai_search_ms") + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è OpenRouter search: " + timingMetrics.get("openrouter_search_ms") + "ms");
            System.out.println("[AiComparisonService] üß† Context building: DISABLED");
            System.out.println("[AiComparisonService] üìù Smart features: DISABLED to avoid lazy loading");
            System.out.println("[AiComparisonService] üîç Query optimization impact: " + (openaiQueryString.equals(openrouterQueryString) ? "C√πng optimized pattern" : "Kh√°c bi·ªát ƒë∆∞·ª£c t·ªëi ∆∞u"));
            System.out.println("[AiComparisonService] üìä Data consistency: " + (openaiContent.equals(openrouterContent) ? "Consistent results" : "Different results detected"));
            
            // Ghi nh·∫≠n performance metrics
            performanceMonitoringService.recordRequest("comparison_mode", totalProcessingTime, true);
            
        } catch (Exception e) {
            long errorProcessingTime = System.currentTimeMillis() - overallStartTime;
            
            System.out.println("[AiComparisonService] ‚ùå ===== L·ªñI TRONG CH·∫æ ƒê·ªò SO S√ÅNH =====");
            System.out.println("[AiComparisonService] üí• L·ªói trong ch·∫ø ƒë·ªô so s√°nh: " + e.getMessage());
            e.printStackTrace();
            
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("timestamp", now.toString());
            result.put("processing_time_ms", errorProcessingTime);
            
            // Ghi nh·∫≠n l·ªói v√†o performance metrics
            performanceMonitoringService.recordRequest("comparison_mode", errorProcessingTime, false);
        }
        
        return result;
    }
    
    /**
     * Find relevant examples based on user query keywords (LEGACY METHOD - kept for fallback)
     * @deprecated Use EnhancedExampleMatchingService.findRelevantExamples() instead
     */
    @Deprecated
    private List<DataExample> findRelevantExamples(String userQuery) {
        System.out.println("\nüîç ===== QUERY MATCHING PROCESS =====");
        System.out.println("üìù User Query: \"" + userQuery + "\"");
        
        if (exampleLibrary == null || exampleLibrary.isEmpty()) {
            System.out.println("‚ùå Knowledge base is empty or not loaded");
            return new ArrayList<>();
        }
        
        System.out.println("üìö Knowledge base contains " + exampleLibrary.size() + " examples");
        
        // Step 1: Extract keywords
        String queryLower = userQuery.toLowerCase();
        List<String> queryWords = Arrays.stream(queryLower.split("\\s+"))
                .filter(word -> word.length() > 2) // Filter out short words
                .collect(Collectors.toList());
        
        // Step 2: Find matching examples
        List<DataExample> matchingExamples = new ArrayList<>();
        Map<DataExample, Integer> exampleScores = new HashMap<>();
        
        for (int i = 0; i < exampleLibrary.size(); i++) {
            DataExample example = exampleLibrary.get(i);
            if (example.getKeywords() == null) continue;
            
            int score = 0;
            List<String> matchedKeywords = new ArrayList<>();
            
            // Calculate score for this example
            for (String keyword : example.getKeywords()) {
                for (String queryWord : queryWords) {
                    boolean isMatch = keyword.toLowerCase().contains(queryWord) || 
                                    queryWord.contains(keyword.toLowerCase());
                    if (isMatch) {
                        score++;
                        matchedKeywords.add(keyword);
                    }
                }
            }
            
            if (score > 0) {
                matchingExamples.add(example);
                exampleScores.put(example, score);
            }
        }
        
        // Step 3: Sort by score
        List<DataExample> sortedExamples = matchingExamples.stream()
                .sorted((e1, e2) -> {
                    int score1 = exampleScores.get(e1);
                    int score2 = exampleScores.get(e2);
                    return Integer.compare(score2, score1); // Descending order
                })
                .limit(10) // Return top 10 most relevant examples
                .collect(Collectors.toList());
        
        System.out.println("‚úÖ Found " + sortedExamples.size() + " matching examples");
        return sortedExamples;
    }
    
    /**
     * Build dynamic examples string for the prompt using enhanced matching
     */
    private String buildDynamicExamples(String userQuery) {
        // Use enhanced matching service for better accuracy
        List<DataExample> relevantExamples = enhancedExampleMatchingService.findRelevantExamples(userQuery, exampleLibrary);
        
        if (relevantExamples.isEmpty()) {
            // Fallback to original method if enhanced matching fails
            relevantExamples = findRelevantExamples(userQuery);
            if (relevantExamples.isEmpty()) {
                return "No specific examples found for this query type.";
            }
        }
        
        StringBuilder examples = new StringBuilder();
        examples.append("RELEVANT EXAMPLES FROM KNOWLEDGE BASE:\n\n");
        
        for (int i = 0; i < relevantExamples.size(); i++) {
            DataExample example = relevantExamples.get(i);
            examples.append("Example ").append(i + 1).append(":\n");
            examples.append("Question: ").append(example.getQuestion()).append("\n");
            examples.append("Keywords: ").append(String.join(", ", example.getKeywords())).append("\n");
            examples.append("Query: ").append(example.getQuery().toPrettyString()).append("\n\n");
        }
        
        return examples.toString();
    }
}
