package com.example.chatlog.service.impl;

import com.example.chatlog.dto.ChatRequest;
import com.example.chatlog.dto.RequestBody;
import com.example.chatlog.enums.ModelProvider;
import com.example.chatlog.service.LogApiService;
import com.example.chatlog.utils.SchemaHint;
import org.springframework.ai.chat.client.ChatClient;
import org.springframework.ai.chat.memory.ChatMemory;
import org.springframework.ai.chat.messages.SystemMessage;
import org.springframework.ai.chat.messages.UserMessage;
import org.springframework.ai.chat.prompt.ChatOptions;
import org.springframework.ai.chat.prompt.Prompt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Service x·ª≠ l√Ω ch·∫ø ƒë·ªô so s√°nh gi·ªØa OpenAI v√† OpenRouter
 * Bao g·ªìm: t·∫°o query song song, th·ª±c hi·ªán t√¨m ki·∫øm, v√† t·∫°o ph·∫£n h·ªìi so s√°nh
 */
@Service
public class AiComparisonService {
    
    @Autowired
    private LogApiService logApiService;
    
    @Autowired
    private AiQueryService aiQueryService;
    
    @Autowired
    private AiResponseService aiResponseService;
    
    
    private final ChatClient chatClient;
    
    public AiComparisonService(ChatClient.Builder builder) {
        this.chatClient = builder.build();
    }
    
    /**
     * T·∫°o chu·ªói th√¥ng tin ng√†y th√°ng cho system message
     */
    private String generateDateContext(LocalDateTime now) {
        return String.format("""
                CURRENT TIME CONTEXT (Vietnam timezone +07:00):
                - Current exact time: %s (+07:00)
                - Current date: %s
                
                PREFERRED TIME QUERY METHOD - Use Elasticsearch relative time expressions:
                - "5 ph√∫t qua, 5 ph√∫t tr∆∞·ªõc, 5 minutes ago", "last 5 minutes" ‚Üí {"gte": "now-5m"}
                - "1 gi·ªù qua, 1 gi·ªù tr∆∞·ªõc, 1 hour ago", "last 1 hour" ‚Üí {"gte": "now-1h"}
                - "24 gi·ªù qua, 24 gi·ªù tr∆∞·ªõc, 24 hours ago", "last 24 hours" ‚Üí {"gte": "now-24h"}
                - "1 tu·∫ßn qua, 1 tu·∫ßn tr∆∞·ªõc, 1 week ago", "7 ng√†y qua, 7 ng√†y tr∆∞·ªõc, 7 days ago", "last week" ‚Üí {"gte": "now-7d"}
                - "1 th√°ng qua, 1 th√°ng tr∆∞·ªõc, 1 month ago", "last month" ‚Üí {"gte": "now-30d"}
                
                SPECIFIC DATE RANGES (when exact dates mentioned):
                - "h√¥m nay, h√¥m nay, today" ‚Üí {"gte": "now/d"}
                - "h√¥m qua, h√¥m qua, yesterday" ‚Üí {"gte": "now-1d/d"}
                - Specific date like "ng√†y 15-09" ‚Üí {"gte": "2025-09-15T00:00:00.000+07:00", "lte": "2025-09-15T23:59:59.999+07:00"}
                
                ADVANTAGES of "now-Xh/d/m" format:
                - More efficient than absolute timestamps
                - Automatically handles timezone
                - Elasticsearch native time calculations
                - Always relative to query execution time
                """,
            now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")),
            now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"))
        );
    }
    
    /**
     * X·ª≠ l√Ω y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng trong ch·∫ø ƒë·ªô so s√°nh, s·ª≠ d·ª•ng c·∫£ OpenAI v√† OpenRouter
     */
    public Map<String, Object> handleRequestWithComparison(Long sessionId, ChatRequest chatRequest) {
        Map<String, Object> result = new HashMap<>();
        LocalDateTime now = LocalDateTime.now();
        String dateContext = generateDateContext(now);
        
        try {
            System.out.println("[AiComparisonService] ===== B·∫ÆT ƒê·∫¶U CH·∫æ ƒê·ªò SO S√ÅNH =====");
            System.out.println("[AiComparisonService] B·∫Øt ƒë·∫ßu ch·∫ø ƒë·ªô so s√°nh cho phi√™n: " + sessionId);
            System.out.println("[AiComparisonService] Tin nh·∫Øn ng∆∞·ªùi d√πng: " + chatRequest.message());
            System.out.println("[AiComparisonService] S·ª≠ d·ª•ng ng·ªØ c·∫£nh ng√†y th√°ng: " + now.format(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
            
            // --- B∆Ø·ªöC 1: So s√°nh qu√° tr√¨nh t·∫°o query ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 1: T·∫°o Elasticsearch Query =====");
            
            // Chu·∫©n b·ªã schema m·ªôt l·∫ßn ƒë·ªÉ d√πng l·∫°i cho c·∫£ hai prompt
            String fullSchema = SchemaHint.getSchemaHint();
            
            // S·ª≠ d·ª•ng QueryPromptTemplate v·ªõi dynamic examples
            String dynamicExamples = "No specific examples available for comparison mode.";
            String queryPrompt = com.example.chatlog.utils.QueryPromptTemplate.createQueryGenerationPrompt(
                chatRequest.message(),
                dateContext,
                fullSchema,
                SchemaHint.getRoleNormalizationRules(),
                dynamicExamples
            );
            
            // T·∫°o system prompt ƒë·∫ßy ƒë·ªß t·ª´ PromptTemplate v·ªõi to√†n b·ªô SchemaHint ƒë·ªÉ b·ªï sung ng·ªØ c·∫£nh
            String fullSystemPrompt = com.example.chatlog.utils.PromptTemplate.getSystemPrompt(
                dateContext,
                SchemaHint.getRoleNormalizationRules(),
                fullSchema,
                SchemaHint.getCategoryGuides(),
                SchemaHint.getNetworkTrafficExamples(),
                SchemaHint.getIPSSecurityExamples(),
                SchemaHint.getAdminRoleExample(),
                SchemaHint.getGeographicExamples(),
                SchemaHint.getFirewallRuleExamples(),
                SchemaHint.getCountingExamples(),
                SchemaHint.getQuickPatterns()
            );
            
            // Gh√©p t·∫•t c·∫£ v√†o m·ªôt system message duy nh·∫•t ƒë·ªÉ AI c√≥ t·ªëi ƒëa b·ªëi c·∫£nh
            String combinedPrompt = queryPrompt + "\n\n" + fullSystemPrompt;
            SystemMessage systemMessage = new SystemMessage(combinedPrompt);
            
            UserMessage userMessage = new UserMessage(chatRequest.message());
            List<String> schemaHints = SchemaHint.allSchemas();
            String schemaContext = String.join("\n\n", schemaHints);
            UserMessage schemaMsg = new UserMessage("Available schema hints:\n" + schemaContext);
            UserMessage sampleLogMsg = new UserMessage("SAMPLE LOG (for inference):\n" + SchemaHint.examplelog());
            
            System.out.println("---------------------------------------------------------------------------------------");
            Prompt prompt = new Prompt(List.of(systemMessage, schemaMsg, sampleLogMsg, userMessage));
            
            ChatOptions chatOptions = ChatOptions.builder()
                .temperature(0.0D)
                .build();
            
            // Theo d√µi th·ªùi gian t·∫°o query c·ªßa OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang t·∫°o Elasticsearch query...");
            long openaiStartTime = System.currentTimeMillis();
            RequestBody openaiQuery = chatClient
                .prompt(prompt)
                .options(chatOptions)
                .call()
                .entity(new ParameterizedTypeReference<>() {});
            long openaiEndTime = System.currentTimeMillis();
            
            // ƒê·∫£m b·∫£o gi√° tr·ªã query ƒë∆∞·ª£c ƒë·∫∑t l√† 1
            if (openaiQuery.getQuery() != 1) {
                openaiQuery.setQuery(1);
            }
            
            String openaiQueryString = openaiQuery.getBody();
            System.out.println("[AiComparisonService] ‚úÖ OPENAI - Query ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openaiEndTime - openaiStartTime) + "ms");
            System.out.println("[AiComparisonService] üìù OPENAI - Query: " + openaiQueryString);
            
            // Theo d√µi th·ªùi gian t·∫°o query c·ªßa OpenRouter (th·ª±c s·ª± g·ªçi OpenRouter v·ªõi temperature kh√°c)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang t·∫°o Elasticsearch query...");
            long openrouterStartTime = System.currentTimeMillis();
            
            // Provider: OpenRouter (query generation in comparison mode)
            ChatOptions openrouterChatOptions = ChatOptions.builder()
                .temperature(0.5D)
                .build();
            
            RequestBody openrouterQuery;
            String openrouterQueryString;
            
            try {
                // G·ªçi tr·ª±c ti·∫øp ChatClient v·ªõi options OpenRouter (openrouterChatOptions)
                openrouterQuery = chatClient
                    .prompt(prompt)
                    .options(openrouterChatOptions)
                    .call()
                    .entity(new ParameterizedTypeReference<>() {});
                    
                if (openrouterQuery.getQuery() != 1) {
                    openrouterQuery.setQuery(1);
                }
                openrouterQueryString = openrouterQuery.getBody();
                
                System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Query ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng v·ªõi temperature kh√°c bi·ªát");
            } catch (Exception e) {
                if (e.getMessage() != null && (e.getMessage().contains("503") || e.getMessage().contains("upstream connect error"))) {
                    System.out.println("[AiComparisonService] ‚ö†Ô∏è OPENROUTER - Service t·∫°m th·ªùi kh√¥ng kh·∫£ d·ª•ng (HTTP 503), d√πng l·∫°i query OpenAI: " + e.getMessage());
                } else {
                    System.out.println("[AiComparisonService] ‚ùå OPENROUTER - T·∫°o query th·∫•t b·∫°i, d√πng l·∫°i query OpenAI: " + e.getMessage());
                }
                openrouterQueryString = openaiQueryString; // Fallback to OpenAI query
            }
            
            long openrouterEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Query ƒë∆∞·ª£c t·∫°o trong " + (openrouterEndTime - openrouterStartTime) + "ms");
            System.out.println("[AiComparisonService] üìù OPENROUTER - Query: " + openrouterQueryString);
            
            // L∆∞u tr·ªØ k·∫øt qu·∫£ t·∫°o query
            Map<String, Object> queryGenerationComparison = new HashMap<>();
            
            Map<String, Object> openaiGeneration = new HashMap<>();
            openaiGeneration.put("response_time_ms", openaiEndTime - openaiStartTime);
            openaiGeneration.put("model", ModelProvider.OPENAI.getModelName());
            openaiGeneration.put("query", openaiQueryString);
            
            Map<String, Object> openrouterGeneration = new HashMap<>();
            openrouterGeneration.put("response_time_ms", openrouterEndTime - openrouterStartTime);
            openrouterGeneration.put("model", ModelProvider.OPENROUTER.getModelName());
            openrouterGeneration.put("query", openrouterQueryString);
            
            queryGenerationComparison.put("openai", openaiGeneration);
            queryGenerationComparison.put("openrouter", openrouterGeneration);
            
            // --- B∆Ø·ªöC 2: T√¨m ki·∫øm Elasticsearch ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 2: T√¨m ki·∫øm Elasticsearch =====");
            
            // Th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch v·ªõi c·∫£ hai query
            Map<String, Object> elasticsearchComparison = new HashMap<>();
            
            // T√¨m ki·∫øm OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch...");
            String[] openaiResults = aiQueryService.getLogData(openaiQuery, chatRequest);
            String openaiContent = openaiResults[0];
            String finalOpenaiQuery = openaiResults[1];
            System.out.println(finalOpenaiQuery);
            
            // Ki·ªÉm tra n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm
            if (openaiContent != null && openaiContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] ‚ùå OPENAI - T√¨m ki·∫øm Elasticsearch g·∫∑p l·ªói, ƒëang th·ª≠ s·ª≠a query...");
                System.out.println("[AiComparisonService] üîß OPENAI - ƒêang t·∫°o l·∫°i query v·ªõi th√¥ng tin l·ªói...");
            } else {
                System.out.println("[AiComparisonService] ‚úÖ OPENAI - T√¨m ki·∫øm Elasticsearch ho√†n th√†nh th√†nh c√¥ng");
                System.out.println("[AiComparisonService] üìä D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ (OpenAI): " + (openaiContent.length() > 500 ? openaiContent.substring(0, 500) + "..." : openaiContent));
            }
            
            Map<String, Object> openaiElasticsearch = new HashMap<>();
            openaiElasticsearch.put("data", openaiContent);
            openaiElasticsearch.put("success", true);
            openaiElasticsearch.put("query", finalOpenaiQuery);
            
            System.out.println("OpenaiElasticsearch : "+ openaiElasticsearch);
            
            // N·∫øu OpenAI query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω
            if (openaiContent != null && openaiContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] üîµ OPENAI - Query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω");
            }
            
            // T√¨m ki·∫øm OpenRouter (s·ª≠ d·ª•ng query ri√™ng t·ª´ OpenRouter)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang th·ª±c hi·ªán t√¨m ki·∫øm Elasticsearch...");
            RequestBody openrouterRequestBody = new RequestBody(openrouterQueryString, 1);
            String[] openrouterResults = aiQueryService.getLogData(openrouterRequestBody, chatRequest);
            String openrouterContent = openrouterResults[0];
            String finalOpenrouterQuery = openrouterResults[1];
            
            // Ki·ªÉm tra n·∫øu c√≥ l·ªói trong qu√° tr√¨nh t√¨m ki·∫øm
            if (openrouterContent != null && openrouterContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] ‚ùå OPENROUTER - T√¨m ki·∫øm Elasticsearch g·∫∑p l·ªói, ƒëang th·ª≠ s·ª≠a query...");
                System.out.println("[AiComparisonService] üîß OPENROUTER - ƒêang t·∫°o l·∫°i query v·ªõi th√¥ng tin l·ªói...");
            } else {
                System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - T√¨m ki·∫øm Elasticsearch ho√†n th√†nh th√†nh c√¥ng");
                System.out.println("[AiComparisonService] üìä D·ªÆ LI·ªÜU TR·∫¢ V·ªÄ (OpenRouter): " + (openrouterContent.length() > 500 ? openrouterContent.substring(0, 500) + "..." : openrouterContent));
            }
            
            Map<String, Object> openrouterElasticsearch = new HashMap<>();
            openrouterElasticsearch.put("data", openrouterContent);
            openrouterElasticsearch.put("success", true);
            openrouterElasticsearch.put("query", finalOpenrouterQuery);
            
            System.out.println("OpenrouterElasticsearch : " + openrouterElasticsearch);
            
            // N·∫øu OpenRouter query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω
            if (openrouterContent != null && openrouterContent.startsWith("‚ùå")) {
                System.out.println("[AiComparisonService] üü† OPENROUTER - Query th·∫•t b·∫°i, gi·ªØ nguy√™n l·ªói ƒë·ªÉ AI x·ª≠ l√Ω");
            }
            
            elasticsearchComparison.put("openai", openaiElasticsearch);
            elasticsearchComparison.put("openrouter", openrouterElasticsearch);
            
            // --- B∆Ø·ªöC 3: T·∫°o c√¢u tr·∫£ l·ªùi ---
            System.out.println("[AiComparisonService] ===== B∆Ø·ªöC 3: T·∫°o c√¢u tr·∫£ l·ªùi AI =====");
            
            // T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ c·∫£ hai model
            Map<String, Object> responseGenerationComparison = new HashMap<>();
            
            // C√¢u tr·∫£ l·ªùi t·ª´ OpenAI
            System.out.println("[AiComparisonService] üîµ OPENAI - ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ d·ªØ li·ªáu Elasticsearch...");
            long openaiResponseStartTime = System.currentTimeMillis();
            String openaiResponse = aiResponseService.getAiResponseForComparison(sessionId + "_openai", chatRequest, openaiContent, finalOpenaiQuery);
            long openaiResponseEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENAI - Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openaiResponseEndTime - openaiResponseStartTime) + "ms");
            
            Map<String, Object> openaiResponseData = new HashMap<>();
            openaiResponseData.put("elasticsearch_query", finalOpenaiQuery);
            openaiResponseData.put("response", openaiResponse);
            openaiResponseData.put("model", ModelProvider.OPENAI.getModelName());
            openaiResponseData.put("elasticsearch_data", openaiContent);
            openaiResponseData.put("response_time_ms", openaiResponseEndTime - openaiResponseStartTime);
            
            // C√¢u tr·∫£ l·ªùi t·ª´ OpenRouter (s·ª≠ d·ª•ng d·ªØ li·ªáu ri√™ng t·ª´ OpenRouter query)
            System.out.println("[AiComparisonService] üü† OPENROUTER - ƒêang t·∫°o ph·∫£n h·ªìi t·ª´ d·ªØ li·ªáu Elasticsearch...");
            long openrouterResponseStartTime = System.currentTimeMillis();
            String openrouterResponse = aiResponseService.getAiResponseForComparison(sessionId + "_openrouter", chatRequest, openrouterContent, finalOpenrouterQuery);
            long openrouterResponseEndTime = System.currentTimeMillis();
            System.out.println("[AiComparisonService] ‚úÖ OPENROUTER - Ph·∫£n h·ªìi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng trong " + (openrouterResponseEndTime - openrouterResponseStartTime) + "ms");
            
            Map<String, Object> openrouterResponseData = new HashMap<>();
            openrouterResponseData.put("elasticsearch_query", finalOpenrouterQuery);
            openrouterResponseData.put("response", openrouterResponse);
            openrouterResponseData.put("model", ModelProvider.OPENROUTER.getModelName());
            openrouterResponseData.put("elasticsearch_data", openrouterContent);
            openrouterResponseData.put("response_time_ms", openrouterResponseEndTime - openrouterResponseStartTime);
            
            responseGenerationComparison.put("openai", openaiResponseData);
            responseGenerationComparison.put("openrouter", openrouterResponseData);
            
            // --- T·ªïng h·ª£p k·∫øt qu·∫£ cu·ªëi c√πng ---
            System.out.println("[AiComparisonService] ===== T·ªîNG H·ª¢P K·∫æT QU·∫¢ =====");
            
            result.put("elasticsearch_comparison", elasticsearchComparison);
            result.put("success", true);
            result.put("query_generation_comparison", queryGenerationComparison);
            result.put("response_generation_comparison", responseGenerationComparison);
            result.put("timestamp", now.toString());
            result.put("user_question", chatRequest.message());
            
            System.out.println("[AiComparisonService] üéâ So s√°nh ho√†n th√†nh th√†nh c√¥ng!");
            System.out.println("[AiComparisonService] ‚è±Ô∏è T·ªïng th·ªùi gian OpenAI: " + (openaiEndTime - openaiStartTime + openaiResponseEndTime - openaiResponseStartTime) + "ms");
            System.out.println("[AiComparisonService] ‚è±Ô∏è T·ªïng th·ªùi gian OpenRouter: " + (openrouterEndTime - openrouterStartTime + openrouterResponseEndTime - openrouterResponseStartTime) + "ms");
            System.out.println("[AiComparisonService] üîç S·ª± kh√°c bi·ªát query OpenAI vs OpenRouter: " + (!openaiQueryString.equals(openrouterQueryString) ? "C√°c query kh√°c nhau ƒë∆∞·ª£c t·∫°o" : "C√πng query ƒë∆∞·ª£c t·∫°o"));
            System.out.println("[AiComparisonService] üìä S·ª± kh√°c bi·ªát d·ªØ li·ªáu OpenAI vs OpenRouter: " + (!openaiContent.equals(openrouterContent) ? "D·ªØ li·ªáu kh√°c nhau ƒë∆∞·ª£c truy xu·∫•t" : "C√πng d·ªØ li·ªáu ƒë∆∞·ª£c truy xu·∫•t"));
            
        } catch (Exception e) {
            System.out.println("[AiComparisonService] ‚ùå ===== L·ªñI TRONG CH·∫æ ƒê·ªò SO S√ÅNH =====");
            System.out.println("[AiComparisonService] üí• L·ªói trong ch·∫ø ƒë·ªô so s√°nh: " + e.getMessage());
            e.printStackTrace();
            
            result.put("success", false);
            result.put("error", e.getMessage());
            result.put("timestamp", now.toString());
        }
        
        return result;
    }
}
