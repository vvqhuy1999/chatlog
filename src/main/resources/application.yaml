server:
  address: 0.0.0.0
  port: 8080

spring:
  # Primary DataSource - Chat Database (Localhost)
  datasource:
    url: jdbc:postgresql://localhost:5432/chatlog
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  # Secondary DataSource - Embedding Database (Supabase) - via properties
  secondary-datasource:
    url: jdbc:postgresql://aws-1-ap-southeast-1.pooler.supabase.com:6543/postgres?sslmode=require&prepareThreshold=0
    username: ${SECONDARY_DATASOURCE_USERNAME}
    password: ${SECONDARY_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver

  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
    defer-datasource-initialization: true

  ai:
    openai:
      api-key: ${OPENAI_API_KEY}
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.0

    openrouter:
      api-key: ${OPENROUTER_API_KEY}
      base-url: https://openrouter.ai/api/v1
      referer: ${OPENROUTER_REFERER:https://localhost:8080}
      chat:
        options:
          model: x-ai/grok-4-fast
          temperature: 0.5
          top-p: 1.0
          max-tokens: 4000

    chat:
      memory:
        repository:
          jdbc:
            initialize-schema: always

    retry:
      max-attempts: 3
      initial-interval: 1000
      max-interval: 5000
      multiplier: 2.0

elastic:
  api:
    key: ${ELASTIC_API_KEY}
    url: ${ELASTIC_URL}

  datasource:
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 30000
      leak-detection-threshold: 60000

  cache:
    type: simple
    cache-names: elasticsearch_queries,ai_responses,schema_mappings,query_patterns,session_contexts,enhanced_examples,query_analysis

  jpa:
    properties:
      hibernate:
        jdbc:
          batch_size: 20
          fetch_size: 50
        cache:
          use_second_level_cache: true
          use_query_cache: true

# Monitoring configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  prometheus:
    metrics:
      export:
        enabled: true

# Logging optimization
logging:
  level:
    com.example.chatlog: INFO
    com.example.chatlog.service.impl.VectorSearchService: DEBUG
    org.springframework.ai: WARN
    org.hibernate.SQL: ERROR
